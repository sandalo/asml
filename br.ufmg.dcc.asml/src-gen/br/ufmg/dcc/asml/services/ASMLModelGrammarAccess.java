/*
* generated by Xtext
*/
package br.ufmg.dcc.asml.services;

import com.google.inject.Singleton;
import com.google.inject.Inject;

import java.util.List;

import org.eclipse.xtext.*;
import org.eclipse.xtext.service.GrammarProvider;
import org.eclipse.xtext.service.AbstractElementFinder.*;

import org.eclipse.xtext.common.services.TerminalsGrammarAccess;

@Singleton
public class ASMLModelGrammarAccess extends AbstractGrammarElementFinder {
	
	
	public class ASMLModelElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "ASMLModel");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cArchitectureKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Assignment cNameAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cNameID_ASMLTerminalRuleCall_1_0 = (RuleCall)cNameAssignment_1.eContents().get(0);
		private final Keyword cLeftCurlyBracketKeyword_2 = (Keyword)cGroup.eContents().get(2);
		private final Group cGroup_3 = (Group)cGroup.eContents().get(3);
		private final Keyword cImportKeyword_3_0 = (Keyword)cGroup_3.eContents().get(0);
		private final Assignment cImportURIAssignment_3_1 = (Assignment)cGroup_3.eContents().get(1);
		private final RuleCall cImportURISTRINGTerminalRuleCall_3_1_0 = (RuleCall)cImportURIAssignment_3_1.eContents().get(0);
		private final Keyword cSemicolonKeyword_3_2 = (Keyword)cGroup_3.eContents().get(2);
		private final Assignment cViewsAssignment_4 = (Assignment)cGroup.eContents().get(4);
		private final RuleCall cViewsViewParserRuleCall_4_0 = (RuleCall)cViewsAssignment_4.eContents().get(0);
		private final Keyword cRightCurlyBracketKeyword_5 = (Keyword)cGroup.eContents().get(5);
		
		//ASMLModel:
		//	"architecture" name=ID_ASML "{" ("import" importURI=STRING ";")? views+=View* "}";
		public ParserRule getRule() { return rule; }

		//"architecture" name=ID_ASML "{" ("import" importURI=STRING ";")? views+=View* "}"
		public Group getGroup() { return cGroup; }

		//"architecture"
		public Keyword getArchitectureKeyword_0() { return cArchitectureKeyword_0; }

		//name=ID_ASML
		public Assignment getNameAssignment_1() { return cNameAssignment_1; }

		//ID_ASML
		public RuleCall getNameID_ASMLTerminalRuleCall_1_0() { return cNameID_ASMLTerminalRuleCall_1_0; }

		//"{"
		public Keyword getLeftCurlyBracketKeyword_2() { return cLeftCurlyBracketKeyword_2; }

		//("import" importURI=STRING ";")?
		public Group getGroup_3() { return cGroup_3; }

		//"import"
		public Keyword getImportKeyword_3_0() { return cImportKeyword_3_0; }

		//importURI=STRING
		public Assignment getImportURIAssignment_3_1() { return cImportURIAssignment_3_1; }

		//STRING
		public RuleCall getImportURISTRINGTerminalRuleCall_3_1_0() { return cImportURISTRINGTerminalRuleCall_3_1_0; }

		//";"
		public Keyword getSemicolonKeyword_3_2() { return cSemicolonKeyword_3_2; }

		//views+=View*
		public Assignment getViewsAssignment_4() { return cViewsAssignment_4; }

		//View
		public RuleCall getViewsViewParserRuleCall_4_0() { return cViewsViewParserRuleCall_4_0; }

		//"}"
		public Keyword getRightCurlyBracketKeyword_5() { return cRightCurlyBracketKeyword_5; }
	}

	public class ViewElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "View");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cViewKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Assignment cNameAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cNameID_ASMLTerminalRuleCall_1_0 = (RuleCall)cNameAssignment_1.eContents().get(0);
		private final Keyword cLeftCurlyBracketKeyword_2 = (Keyword)cGroup.eContents().get(2);
		private final Group cGroup_3 = (Group)cGroup.eContents().get(3);
		private final Group cGroup_3_0 = (Group)cGroup_3.eContents().get(0);
		private final Keyword cAttributesKeyword_3_0_0 = (Keyword)cGroup_3_0.eContents().get(0);
		private final Assignment cAttributesAssignment_3_0_1 = (Assignment)cGroup_3_0.eContents().get(1);
		private final RuleCall cAttributesAttributeParserRuleCall_3_0_1_0 = (RuleCall)cAttributesAssignment_3_0_1.eContents().get(0);
		private final Keyword cCommaKeyword_3_0_2 = (Keyword)cGroup_3_0.eContents().get(2);
		private final Keyword cSemicolonKeyword_3_1 = (Keyword)cGroup_3.eContents().get(1);
		private final Assignment cComponentsAssignment_4 = (Assignment)cGroup.eContents().get(4);
		private final RuleCall cComponentsAbstractComponentParserRuleCall_4_0 = (RuleCall)cComponentsAssignment_4.eContents().get(0);
		private final Assignment cRestrictionsAssignment_5 = (Assignment)cGroup.eContents().get(5);
		private final RuleCall cRestrictionsRestrictionParserRuleCall_5_0 = (RuleCall)cRestrictionsAssignment_5.eContents().get(0);
		private final Keyword cRightCurlyBracketKeyword_6 = (Keyword)cGroup.eContents().get(6);
		
		//View:
		//	"view" name=ID_ASML "{" (("attributes" attributes+=Attribute ","?)* ";")? components+=AbstractComponent*
		//	restrictions+=Restriction* "}";
		public ParserRule getRule() { return rule; }

		//"view" name=ID_ASML "{" (("attributes" attributes+=Attribute ","?)* ";")? components+=AbstractComponent*
		//restrictions+=Restriction* "}"
		public Group getGroup() { return cGroup; }

		//"view"
		public Keyword getViewKeyword_0() { return cViewKeyword_0; }

		//name=ID_ASML
		public Assignment getNameAssignment_1() { return cNameAssignment_1; }

		//ID_ASML
		public RuleCall getNameID_ASMLTerminalRuleCall_1_0() { return cNameID_ASMLTerminalRuleCall_1_0; }

		//"{"
		public Keyword getLeftCurlyBracketKeyword_2() { return cLeftCurlyBracketKeyword_2; }

		//(("attributes" attributes+=Attribute ","?)* ";")?
		public Group getGroup_3() { return cGroup_3; }

		//("attributes" attributes+=Attribute ","?)*
		public Group getGroup_3_0() { return cGroup_3_0; }

		//"attributes"
		public Keyword getAttributesKeyword_3_0_0() { return cAttributesKeyword_3_0_0; }

		//attributes+=Attribute
		public Assignment getAttributesAssignment_3_0_1() { return cAttributesAssignment_3_0_1; }

		//Attribute
		public RuleCall getAttributesAttributeParserRuleCall_3_0_1_0() { return cAttributesAttributeParserRuleCall_3_0_1_0; }

		//","?
		public Keyword getCommaKeyword_3_0_2() { return cCommaKeyword_3_0_2; }

		//";"
		public Keyword getSemicolonKeyword_3_1() { return cSemicolonKeyword_3_1; }

		//components+=AbstractComponent*
		public Assignment getComponentsAssignment_4() { return cComponentsAssignment_4; }

		//AbstractComponent
		public RuleCall getComponentsAbstractComponentParserRuleCall_4_0() { return cComponentsAbstractComponentParserRuleCall_4_0; }

		//restrictions+=Restriction*
		public Assignment getRestrictionsAssignment_5() { return cRestrictionsAssignment_5; }

		//Restriction
		public RuleCall getRestrictionsRestrictionParserRuleCall_5_0() { return cRestrictionsRestrictionParserRuleCall_5_0; }

		//"}"
		public Keyword getRightCurlyBracketKeyword_6() { return cRightCurlyBracketKeyword_6; }
	}

	public class AbstractComponentElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "AbstractComponent");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final RuleCall cLayerParserRuleCall_0 = (RuleCall)cAlternatives.eContents().get(0);
		private final RuleCall cModuleParserRuleCall_1 = (RuleCall)cAlternatives.eContents().get(1);
		private final RuleCall cMetaModuleParserRuleCall_2 = (RuleCall)cAlternatives.eContents().get(2);
		private final RuleCall cClassParserRuleCall_3 = (RuleCall)cAlternatives.eContents().get(3);
		private final RuleCall cMethodParserRuleCall_4 = (RuleCall)cAlternatives.eContents().get(4);
		private final RuleCall cConfigurationElementParserRuleCall_5 = (RuleCall)cAlternatives.eContents().get(5);
		private final RuleCall cComponentParserRuleCall_6 = (RuleCall)cAlternatives.eContents().get(6);
		private final RuleCall cFrameworkInstantiationParserRuleCall_7 = (RuleCall)cAlternatives.eContents().get(7);
		private final RuleCall cFrameworkClassParserRuleCall_8 = (RuleCall)cAlternatives.eContents().get(8);
		
		//AbstractComponent:
		//	Layer | Module | MetaModule | Class | Method | ConfigurationElement | Component | FrameworkInstantiation |
		//	FrameworkClass;
		public ParserRule getRule() { return rule; }

		//Layer | Module | MetaModule | Class | Method | ConfigurationElement | Component | FrameworkInstantiation |
		//FrameworkClass
		public Alternatives getAlternatives() { return cAlternatives; }

		//Layer
		public RuleCall getLayerParserRuleCall_0() { return cLayerParserRuleCall_0; }

		//Module
		public RuleCall getModuleParserRuleCall_1() { return cModuleParserRuleCall_1; }

		//MetaModule
		public RuleCall getMetaModuleParserRuleCall_2() { return cMetaModuleParserRuleCall_2; }

		//Class
		public RuleCall getClassParserRuleCall_3() { return cClassParserRuleCall_3; }

		//Method
		public RuleCall getMethodParserRuleCall_4() { return cMethodParserRuleCall_4; }

		//ConfigurationElement
		public RuleCall getConfigurationElementParserRuleCall_5() { return cConfigurationElementParserRuleCall_5; }

		//Component
		public RuleCall getComponentParserRuleCall_6() { return cComponentParserRuleCall_6; }

		//FrameworkInstantiation
		public RuleCall getFrameworkInstantiationParserRuleCall_7() { return cFrameworkInstantiationParserRuleCall_7; }

		//FrameworkClass
		public RuleCall getFrameworkClassParserRuleCall_8() { return cFrameworkClassParserRuleCall_8; }
	}

	public class AttributeElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "Attribute");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Assignment cNameAssignment_0 = (Assignment)cGroup.eContents().get(0);
		private final RuleCall cNameID_ASMLTerminalRuleCall_0_0 = (RuleCall)cNameAssignment_0.eContents().get(0);
		private final Keyword cColonKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Assignment cValueAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final RuleCall cValueSTRINGTerminalRuleCall_2_0 = (RuleCall)cValueAssignment_2.eContents().get(0);
		
		//Attribute:
		//	name=ID_ASML ":" value=STRING;
		public ParserRule getRule() { return rule; }

		//name=ID_ASML ":" value=STRING
		public Group getGroup() { return cGroup; }

		//name=ID_ASML
		public Assignment getNameAssignment_0() { return cNameAssignment_0; }

		//ID_ASML
		public RuleCall getNameID_ASMLTerminalRuleCall_0_0() { return cNameID_ASMLTerminalRuleCall_0_0; }

		//":"
		public Keyword getColonKeyword_1() { return cColonKeyword_1; }

		//value=STRING
		public Assignment getValueAssignment_2() { return cValueAssignment_2; }

		//STRING
		public RuleCall getValueSTRINGTerminalRuleCall_2_0() { return cValueSTRINGTerminalRuleCall_2_0; }
	}

	public class AbstractNameConvetionElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "AbstractNameConvetion");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final RuleCall cSTRINGTerminalRuleCall_0 = (RuleCall)cAlternatives.eContents().get(0);
		private final RuleCall cClassMatchingParserRuleCall_1 = (RuleCall)cAlternatives.eContents().get(1);
		
		//AbstractNameConvetion:
		//	STRING | ClassMatching;
		public ParserRule getRule() { return rule; }

		//STRING | ClassMatching
		public Alternatives getAlternatives() { return cAlternatives; }

		//STRING
		public RuleCall getSTRINGTerminalRuleCall_0() { return cSTRINGTerminalRuleCall_0; }

		//ClassMatching
		public RuleCall getClassMatchingParserRuleCall_1() { return cClassMatchingParserRuleCall_1; }
	}

	public class ComponentElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "Component");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cComponentKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Assignment cNameAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cNameID_ASMLTerminalRuleCall_1_0 = (RuleCall)cNameAssignment_1.eContents().get(0);
		private final Keyword cLeftCurlyBracketKeyword_2 = (Keyword)cGroup.eContents().get(2);
		private final Group cGroup_3 = (Group)cGroup.eContents().get(3);
		private final Keyword cMatchingKeyword_3_0 = (Keyword)cGroup_3.eContents().get(0);
		private final Assignment cMatchingAssignment_3_1 = (Assignment)cGroup_3.eContents().get(1);
		private final RuleCall cMatchingSTRINGTerminalRuleCall_3_1_0 = (RuleCall)cMatchingAssignment_3_1.eContents().get(0);
		private final Keyword cSemicolonKeyword_3_2 = (Keyword)cGroup_3.eContents().get(2);
		private final Group cGroup_4 = (Group)cGroup.eContents().get(4);
		private final Keyword cCardinalityKeyword_4_0 = (Keyword)cGroup_4.eContents().get(0);
		private final Assignment cCardinalityAssignment_4_1 = (Assignment)cGroup_4.eContents().get(1);
		private final RuleCall cCardinalityCardinalityEnumRuleCall_4_1_0 = (RuleCall)cCardinalityAssignment_4_1.eContents().get(0);
		private final Keyword cSemicolonKeyword_4_2 = (Keyword)cGroup_4.eContents().get(2);
		private final Assignment cComponentsAssignment_5 = (Assignment)cGroup.eContents().get(5);
		private final RuleCall cComponentsAbstractComponentParserRuleCall_5_0 = (RuleCall)cComponentsAssignment_5.eContents().get(0);
		private final Assignment cRestrictionsAssignment_6 = (Assignment)cGroup.eContents().get(6);
		private final RuleCall cRestrictionsRestrictionParserRuleCall_6_0 = (RuleCall)cRestrictionsAssignment_6.eContents().get(0);
		private final Keyword cRightCurlyBracketKeyword_7 = (Keyword)cGroup.eContents().get(7);
		
		//Component:
		//	"component" name=ID_ASML "{" ("matching" matching=STRING ";")? ("cardinality" cardinality=Cardinality ";")?
		//	components+=AbstractComponent* restrictions+=Restriction* "}";
		public ParserRule getRule() { return rule; }

		//"component" name=ID_ASML "{" ("matching" matching=STRING ";")? ("cardinality" cardinality=Cardinality ";")?
		//components+=AbstractComponent* restrictions+=Restriction* "}"
		public Group getGroup() { return cGroup; }

		//"component"
		public Keyword getComponentKeyword_0() { return cComponentKeyword_0; }

		//name=ID_ASML
		public Assignment getNameAssignment_1() { return cNameAssignment_1; }

		//ID_ASML
		public RuleCall getNameID_ASMLTerminalRuleCall_1_0() { return cNameID_ASMLTerminalRuleCall_1_0; }

		//"{"
		public Keyword getLeftCurlyBracketKeyword_2() { return cLeftCurlyBracketKeyword_2; }

		//("matching" matching=STRING ";")?
		public Group getGroup_3() { return cGroup_3; }

		//"matching"
		public Keyword getMatchingKeyword_3_0() { return cMatchingKeyword_3_0; }

		//matching=STRING
		public Assignment getMatchingAssignment_3_1() { return cMatchingAssignment_3_1; }

		//STRING
		public RuleCall getMatchingSTRINGTerminalRuleCall_3_1_0() { return cMatchingSTRINGTerminalRuleCall_3_1_0; }

		//";"
		public Keyword getSemicolonKeyword_3_2() { return cSemicolonKeyword_3_2; }

		//("cardinality" cardinality=Cardinality ";")?
		public Group getGroup_4() { return cGroup_4; }

		//"cardinality"
		public Keyword getCardinalityKeyword_4_0() { return cCardinalityKeyword_4_0; }

		//cardinality=Cardinality
		public Assignment getCardinalityAssignment_4_1() { return cCardinalityAssignment_4_1; }

		//Cardinality
		public RuleCall getCardinalityCardinalityEnumRuleCall_4_1_0() { return cCardinalityCardinalityEnumRuleCall_4_1_0; }

		//";"
		public Keyword getSemicolonKeyword_4_2() { return cSemicolonKeyword_4_2; }

		//components+=AbstractComponent*
		public Assignment getComponentsAssignment_5() { return cComponentsAssignment_5; }

		//AbstractComponent
		public RuleCall getComponentsAbstractComponentParserRuleCall_5_0() { return cComponentsAbstractComponentParserRuleCall_5_0; }

		//restrictions+=Restriction*
		public Assignment getRestrictionsAssignment_6() { return cRestrictionsAssignment_6; }

		//Restriction
		public RuleCall getRestrictionsRestrictionParserRuleCall_6_0() { return cRestrictionsRestrictionParserRuleCall_6_0; }

		//"}"
		public Keyword getRightCurlyBracketKeyword_7() { return cRightCurlyBracketKeyword_7; }
	}

	public class FrameworkInstantiationElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "FrameworkInstantiation");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cFrameworkInstantiationKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Assignment cNameAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cNameID_ASMLTerminalRuleCall_1_0 = (RuleCall)cNameAssignment_1.eContents().get(0);
		private final Keyword cLeftCurlyBracketKeyword_2 = (Keyword)cGroup.eContents().get(2);
		private final Assignment cComponentsAssignment_3 = (Assignment)cGroup.eContents().get(3);
		private final RuleCall cComponentsAbstractComponentParserRuleCall_3_0 = (RuleCall)cComponentsAssignment_3.eContents().get(0);
		private final Assignment cRestrictionsAssignment_4 = (Assignment)cGroup.eContents().get(4);
		private final RuleCall cRestrictionsRestrictionParserRuleCall_4_0 = (RuleCall)cRestrictionsAssignment_4.eContents().get(0);
		private final Keyword cRightCurlyBracketKeyword_5 = (Keyword)cGroup.eContents().get(5);
		
		//FrameworkInstantiation:
		//	"framework-instantiation" name=ID_ASML "{" components+=AbstractComponent* restrictions+=Restriction* "}";
		public ParserRule getRule() { return rule; }

		//"framework-instantiation" name=ID_ASML "{" components+=AbstractComponent* restrictions+=Restriction* "}"
		public Group getGroup() { return cGroup; }

		//"framework-instantiation"
		public Keyword getFrameworkInstantiationKeyword_0() { return cFrameworkInstantiationKeyword_0; }

		//name=ID_ASML
		public Assignment getNameAssignment_1() { return cNameAssignment_1; }

		//ID_ASML
		public RuleCall getNameID_ASMLTerminalRuleCall_1_0() { return cNameID_ASMLTerminalRuleCall_1_0; }

		//"{"
		public Keyword getLeftCurlyBracketKeyword_2() { return cLeftCurlyBracketKeyword_2; }

		//components+=AbstractComponent*
		public Assignment getComponentsAssignment_3() { return cComponentsAssignment_3; }

		//AbstractComponent
		public RuleCall getComponentsAbstractComponentParserRuleCall_3_0() { return cComponentsAbstractComponentParserRuleCall_3_0; }

		//restrictions+=Restriction*
		public Assignment getRestrictionsAssignment_4() { return cRestrictionsAssignment_4; }

		//Restriction
		public RuleCall getRestrictionsRestrictionParserRuleCall_4_0() { return cRestrictionsRestrictionParserRuleCall_4_0; }

		//"}"
		public Keyword getRightCurlyBracketKeyword_5() { return cRightCurlyBracketKeyword_5; }
	}

	public class FrameworkClassElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "FrameworkClass");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cFrameworkClassKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Assignment cNameAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cNameID_ASMLTerminalRuleCall_1_0 = (RuleCall)cNameAssignment_1.eContents().get(0);
		private final Keyword cLeftCurlyBracketKeyword_2 = (Keyword)cGroup.eContents().get(2);
		private final Assignment cJavaCLassAssignment_3 = (Assignment)cGroup.eContents().get(3);
		private final RuleCall cJavaCLassSTRINGTerminalRuleCall_3_0 = (RuleCall)cJavaCLassAssignment_3.eContents().get(0);
		private final Keyword cSemicolonKeyword_4 = (Keyword)cGroup.eContents().get(4);
		private final Keyword cRightCurlyBracketKeyword_5 = (Keyword)cGroup.eContents().get(5);
		
		//FrameworkClass:
		//	"framework-class" name=ID_ASML "{" javaCLass=STRING ";" "}";
		public ParserRule getRule() { return rule; }

		//"framework-class" name=ID_ASML "{" javaCLass=STRING ";" "}"
		public Group getGroup() { return cGroup; }

		//"framework-class"
		public Keyword getFrameworkClassKeyword_0() { return cFrameworkClassKeyword_0; }

		//name=ID_ASML
		public Assignment getNameAssignment_1() { return cNameAssignment_1; }

		//ID_ASML
		public RuleCall getNameID_ASMLTerminalRuleCall_1_0() { return cNameID_ASMLTerminalRuleCall_1_0; }

		//"{"
		public Keyword getLeftCurlyBracketKeyword_2() { return cLeftCurlyBracketKeyword_2; }

		//javaCLass=STRING
		public Assignment getJavaCLassAssignment_3() { return cJavaCLassAssignment_3; }

		//STRING
		public RuleCall getJavaCLassSTRINGTerminalRuleCall_3_0() { return cJavaCLassSTRINGTerminalRuleCall_3_0; }

		//";"
		public Keyword getSemicolonKeyword_4() { return cSemicolonKeyword_4; }

		//"}"
		public Keyword getRightCurlyBracketKeyword_5() { return cRightCurlyBracketKeyword_5; }
	}

	public class ExpressionMatchingOperatorElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "ExpressionMatchingOperator");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final Assignment cANDAssignment_0 = (Assignment)cAlternatives.eContents().get(0);
		private final Keyword cANDAndKeyword_0_0 = (Keyword)cANDAssignment_0.eContents().get(0);
		private final Assignment cORAssignment_1 = (Assignment)cAlternatives.eContents().get(1);
		private final Keyword cOROrKeyword_1_0 = (Keyword)cORAssignment_1.eContents().get(0);
		
		//ExpressionMatchingOperator:
		//	AND="and" | OR="or";
		public ParserRule getRule() { return rule; }

		//AND="and" | OR="or"
		public Alternatives getAlternatives() { return cAlternatives; }

		//AND="and"
		public Assignment getANDAssignment_0() { return cANDAssignment_0; }

		//"and"
		public Keyword getANDAndKeyword_0_0() { return cANDAndKeyword_0_0; }

		//OR="or"
		public Assignment getORAssignment_1() { return cORAssignment_1; }

		//"or"
		public Keyword getOROrKeyword_1_0() { return cOROrKeyword_1_0; }
	}

	public class LayerMatchingElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "LayerMatching");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Assignment cLayerMatchingAssignment_0 = (Assignment)cGroup.eContents().get(0);
		private final RuleCall cLayerMatchingLayerMatchingClauseEnumRuleCall_0_0 = (RuleCall)cLayerMatchingAssignment_0.eContents().get(0);
		private final Assignment cParameterAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final CrossReference cParameterAbstractComponentCrossReference_1_0 = (CrossReference)cParameterAssignment_1.eContents().get(0);
		private final RuleCall cParameterAbstractComponentQualifiedNameParserRuleCall_1_0_1 = (RuleCall)cParameterAbstractComponentCrossReference_1_0.eContents().get(1);
		
		//LayerMatching:
		//	layerMatching=LayerMatchingClause parameter=[AbstractComponent|QualifiedName];
		public ParserRule getRule() { return rule; }

		//layerMatching=LayerMatchingClause parameter=[AbstractComponent|QualifiedName]
		public Group getGroup() { return cGroup; }

		//layerMatching=LayerMatchingClause
		public Assignment getLayerMatchingAssignment_0() { return cLayerMatchingAssignment_0; }

		//LayerMatchingClause
		public RuleCall getLayerMatchingLayerMatchingClauseEnumRuleCall_0_0() { return cLayerMatchingLayerMatchingClauseEnumRuleCall_0_0; }

		//parameter=[AbstractComponent|QualifiedName]
		public Assignment getParameterAssignment_1() { return cParameterAssignment_1; }

		//[AbstractComponent|QualifiedName]
		public CrossReference getParameterAbstractComponentCrossReference_1_0() { return cParameterAbstractComponentCrossReference_1_0; }

		//QualifiedName
		public RuleCall getParameterAbstractComponentQualifiedNameParserRuleCall_1_0_1() { return cParameterAbstractComponentQualifiedNameParserRuleCall_1_0_1; }
	}

	public class ModuleMatchingElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "ModuleMatching");
		private final Assignment cParameterAssignment = (Assignment)rule.eContents().get(1);
		private final RuleCall cParameterModuleMatchingParamenterEnumRuleCall_0 = (RuleCall)cParameterAssignment.eContents().get(0);
		
		//ModuleMatching:
		//	parameter=ModuleMatchingParamenter;
		public ParserRule getRule() { return rule; }

		//parameter=ModuleMatchingParamenter
		public Assignment getParameterAssignment() { return cParameterAssignment; }

		//ModuleMatchingParamenter
		public RuleCall getParameterModuleMatchingParamenterEnumRuleCall_0() { return cParameterModuleMatchingParamenterEnumRuleCall_0; }
	}

	public class ClassMatchingElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "ClassMatching");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Assignment cExpressionMatchingAssignment_0 = (Assignment)cGroup.eContents().get(0);
		private final RuleCall cExpressionMatchingExpressionMatchingClauseEnumRuleCall_0_0 = (RuleCall)cExpressionMatchingAssignment_0.eContents().get(0);
		private final Assignment cParameterAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cParameterSTRINGTerminalRuleCall_1_0 = (RuleCall)cParameterAssignment_1.eContents().get(0);
		
		////	(operator=ExpressionMatchingOperator expressionMatchings=ExpressionMatchingClause parameter=STRING)?
		//ClassMatching:
		//	expressionMatching=ExpressionMatchingClause parameter=STRING;
		public ParserRule getRule() { return rule; }

		//expressionMatching=ExpressionMatchingClause parameter=STRING
		public Group getGroup() { return cGroup; }

		//expressionMatching=ExpressionMatchingClause
		public Assignment getExpressionMatchingAssignment_0() { return cExpressionMatchingAssignment_0; }

		//ExpressionMatchingClause
		public RuleCall getExpressionMatchingExpressionMatchingClauseEnumRuleCall_0_0() { return cExpressionMatchingExpressionMatchingClauseEnumRuleCall_0_0; }

		//parameter=STRING
		public Assignment getParameterAssignment_1() { return cParameterAssignment_1; }

		//STRING
		public RuleCall getParameterSTRINGTerminalRuleCall_1_0() { return cParameterSTRINGTerminalRuleCall_1_0; }
	}

	public class ConfigurationElementElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "ConfigurationElement");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final RuleCall cConfigurationParserRuleCall_0 = (RuleCall)cAlternatives.eContents().get(0);
		private final RuleCall cXmlDocumentParserRuleCall_1 = (RuleCall)cAlternatives.eContents().get(1);
		private final RuleCall cXmlElementParserRuleCall_2 = (RuleCall)cAlternatives.eContents().get(2);
		private final RuleCall cFileParserRuleCall_3 = (RuleCall)cAlternatives.eContents().get(3);
		
		//ConfigurationElement:
		//	Configuration | XmlDocument | XmlElement | File;
		public ParserRule getRule() { return rule; }

		//Configuration | XmlDocument | XmlElement | File
		public Alternatives getAlternatives() { return cAlternatives; }

		//Configuration
		public RuleCall getConfigurationParserRuleCall_0() { return cConfigurationParserRuleCall_0; }

		//XmlDocument
		public RuleCall getXmlDocumentParserRuleCall_1() { return cXmlDocumentParserRuleCall_1; }

		//XmlElement
		public RuleCall getXmlElementParserRuleCall_2() { return cXmlElementParserRuleCall_2; }

		//File
		public RuleCall getFileParserRuleCall_3() { return cFileParserRuleCall_3; }
	}

	public class FileElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "File");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cFileKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Assignment cNameAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cNameID_ASMLTerminalRuleCall_1_0 = (RuleCall)cNameAssignment_1.eContents().get(0);
		private final Keyword cLeftCurlyBracketKeyword_2 = (Keyword)cGroup.eContents().get(2);
		private final Group cGroup_3 = (Group)cGroup.eContents().get(3);
		private final Keyword cMatchingKeyword_3_0 = (Keyword)cGroup_3.eContents().get(0);
		private final Assignment cMatchingAssignment_3_1 = (Assignment)cGroup_3.eContents().get(1);
		private final RuleCall cMatchingAbstractNameConvetionParserRuleCall_3_1_0 = (RuleCall)cMatchingAssignment_3_1.eContents().get(0);
		private final Keyword cSemicolonKeyword_3_2 = (Keyword)cGroup_3.eContents().get(2);
		private final Group cGroup_4 = (Group)cGroup.eContents().get(4);
		private final Keyword cCardinalityKeyword_4_0 = (Keyword)cGroup_4.eContents().get(0);
		private final Assignment cCardinalityAssignment_4_1 = (Assignment)cGroup_4.eContents().get(1);
		private final RuleCall cCardinalityCardinalityEnumRuleCall_4_1_0 = (RuleCall)cCardinalityAssignment_4_1.eContents().get(0);
		private final Keyword cSemicolonKeyword_4_2 = (Keyword)cGroup_4.eContents().get(2);
		private final Keyword cRightCurlyBracketKeyword_5 = (Keyword)cGroup.eContents().get(5);
		
		//File:
		//	"file" name=ID_ASML "{" ("matching" matching=AbstractNameConvetion ";")? ("cardinality" cardinality=Cardinality ";")?
		//	"}";
		public ParserRule getRule() { return rule; }

		//"file" name=ID_ASML "{" ("matching" matching=AbstractNameConvetion ";")? ("cardinality" cardinality=Cardinality ";")?
		//"}"
		public Group getGroup() { return cGroup; }

		//"file"
		public Keyword getFileKeyword_0() { return cFileKeyword_0; }

		//name=ID_ASML
		public Assignment getNameAssignment_1() { return cNameAssignment_1; }

		//ID_ASML
		public RuleCall getNameID_ASMLTerminalRuleCall_1_0() { return cNameID_ASMLTerminalRuleCall_1_0; }

		//"{"
		public Keyword getLeftCurlyBracketKeyword_2() { return cLeftCurlyBracketKeyword_2; }

		//("matching" matching=AbstractNameConvetion ";")?
		public Group getGroup_3() { return cGroup_3; }

		//"matching"
		public Keyword getMatchingKeyword_3_0() { return cMatchingKeyword_3_0; }

		//matching=AbstractNameConvetion
		public Assignment getMatchingAssignment_3_1() { return cMatchingAssignment_3_1; }

		//AbstractNameConvetion
		public RuleCall getMatchingAbstractNameConvetionParserRuleCall_3_1_0() { return cMatchingAbstractNameConvetionParserRuleCall_3_1_0; }

		//";"
		public Keyword getSemicolonKeyword_3_2() { return cSemicolonKeyword_3_2; }

		//("cardinality" cardinality=Cardinality ";")?
		public Group getGroup_4() { return cGroup_4; }

		//"cardinality"
		public Keyword getCardinalityKeyword_4_0() { return cCardinalityKeyword_4_0; }

		//cardinality=Cardinality
		public Assignment getCardinalityAssignment_4_1() { return cCardinalityAssignment_4_1; }

		//Cardinality
		public RuleCall getCardinalityCardinalityEnumRuleCall_4_1_0() { return cCardinalityCardinalityEnumRuleCall_4_1_0; }

		//";"
		public Keyword getSemicolonKeyword_4_2() { return cSemicolonKeyword_4_2; }

		//"}"
		public Keyword getRightCurlyBracketKeyword_5() { return cRightCurlyBracketKeyword_5; }
	}

	public class ConfigurationElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "Configuration");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cConfigurationKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Assignment cNameAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cNameID_ASMLTerminalRuleCall_1_0 = (RuleCall)cNameAssignment_1.eContents().get(0);
		private final Keyword cLeftCurlyBracketKeyword_2 = (Keyword)cGroup.eContents().get(2);
		private final Group cGroup_3 = (Group)cGroup.eContents().get(3);
		private final Keyword cMatchingKeyword_3_0 = (Keyword)cGroup_3.eContents().get(0);
		private final Assignment cMatchingAssignment_3_1 = (Assignment)cGroup_3.eContents().get(1);
		private final RuleCall cMatchingSTRINGTerminalRuleCall_3_1_0 = (RuleCall)cMatchingAssignment_3_1.eContents().get(0);
		private final Keyword cSemicolonKeyword_3_2 = (Keyword)cGroup_3.eContents().get(2);
		private final Group cGroup_4 = (Group)cGroup.eContents().get(4);
		private final Keyword cCardinalityKeyword_4_0 = (Keyword)cGroup_4.eContents().get(0);
		private final Assignment cCardinalityAssignment_4_1 = (Assignment)cGroup_4.eContents().get(1);
		private final RuleCall cCardinalityCardinalityEnumRuleCall_4_1_0 = (RuleCall)cCardinalityAssignment_4_1.eContents().get(0);
		private final Keyword cSemicolonKeyword_4_2 = (Keyword)cGroup_4.eContents().get(2);
		private final Assignment cConfigurationElementAssignment_5 = (Assignment)cGroup.eContents().get(5);
		private final RuleCall cConfigurationElementConfigurationElementParserRuleCall_5_0 = (RuleCall)cConfigurationElementAssignment_5.eContents().get(0);
		private final Keyword cRightCurlyBracketKeyword_6 = (Keyword)cGroup.eContents().get(6);
		
		//Configuration:
		//	"configuration" name=ID_ASML "{" ("matching" matching=STRING ";")? ("cardinality" cardinality=Cardinality ";")?
		//	configurationElement+=ConfigurationElement* "}";
		public ParserRule getRule() { return rule; }

		//"configuration" name=ID_ASML "{" ("matching" matching=STRING ";")? ("cardinality" cardinality=Cardinality ";")?
		//configurationElement+=ConfigurationElement* "}"
		public Group getGroup() { return cGroup; }

		//"configuration"
		public Keyword getConfigurationKeyword_0() { return cConfigurationKeyword_0; }

		//name=ID_ASML
		public Assignment getNameAssignment_1() { return cNameAssignment_1; }

		//ID_ASML
		public RuleCall getNameID_ASMLTerminalRuleCall_1_0() { return cNameID_ASMLTerminalRuleCall_1_0; }

		//"{"
		public Keyword getLeftCurlyBracketKeyword_2() { return cLeftCurlyBracketKeyword_2; }

		//("matching" matching=STRING ";")?
		public Group getGroup_3() { return cGroup_3; }

		//"matching"
		public Keyword getMatchingKeyword_3_0() { return cMatchingKeyword_3_0; }

		//matching=STRING
		public Assignment getMatchingAssignment_3_1() { return cMatchingAssignment_3_1; }

		//STRING
		public RuleCall getMatchingSTRINGTerminalRuleCall_3_1_0() { return cMatchingSTRINGTerminalRuleCall_3_1_0; }

		//";"
		public Keyword getSemicolonKeyword_3_2() { return cSemicolonKeyword_3_2; }

		//("cardinality" cardinality=Cardinality ";")?
		public Group getGroup_4() { return cGroup_4; }

		//"cardinality"
		public Keyword getCardinalityKeyword_4_0() { return cCardinalityKeyword_4_0; }

		//cardinality=Cardinality
		public Assignment getCardinalityAssignment_4_1() { return cCardinalityAssignment_4_1; }

		//Cardinality
		public RuleCall getCardinalityCardinalityEnumRuleCall_4_1_0() { return cCardinalityCardinalityEnumRuleCall_4_1_0; }

		//";"
		public Keyword getSemicolonKeyword_4_2() { return cSemicolonKeyword_4_2; }

		//configurationElement+=ConfigurationElement*
		public Assignment getConfigurationElementAssignment_5() { return cConfigurationElementAssignment_5; }

		//ConfigurationElement
		public RuleCall getConfigurationElementConfigurationElementParserRuleCall_5_0() { return cConfigurationElementConfigurationElementParserRuleCall_5_0; }

		//"}"
		public Keyword getRightCurlyBracketKeyword_6() { return cRightCurlyBracketKeyword_6; }
	}

	public class MethodElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "Method");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cMethodKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Assignment cNameAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cNameID_ASMLTerminalRuleCall_1_0 = (RuleCall)cNameAssignment_1.eContents().get(0);
		private final Keyword cLeftCurlyBracketKeyword_2 = (Keyword)cGroup.eContents().get(2);
		private final Group cGroup_3 = (Group)cGroup.eContents().get(3);
		private final Keyword cMatchingKeyword_3_0 = (Keyword)cGroup_3.eContents().get(0);
		private final Assignment cMatchingAssignment_3_1 = (Assignment)cGroup_3.eContents().get(1);
		private final RuleCall cMatchingSTRINGTerminalRuleCall_3_1_0 = (RuleCall)cMatchingAssignment_3_1.eContents().get(0);
		private final Keyword cSemicolonKeyword_3_2 = (Keyword)cGroup_3.eContents().get(2);
		private final Group cGroup_4 = (Group)cGroup.eContents().get(4);
		private final Keyword cCardinalityKeyword_4_0 = (Keyword)cGroup_4.eContents().get(0);
		private final Assignment cCardinalityAssignment_4_1 = (Assignment)cGroup_4.eContents().get(1);
		private final RuleCall cCardinalityCardinalityEnumRuleCall_4_1_0 = (RuleCall)cCardinalityAssignment_4_1.eContents().get(0);
		private final Keyword cSemicolonKeyword_4_2 = (Keyword)cGroup_4.eContents().get(2);
		private final Keyword cRightCurlyBracketKeyword_5 = (Keyword)cGroup.eContents().get(5);
		
		//Method:
		//	"method" name=ID_ASML "{" ("matching" matching=STRING ";")? ("cardinality" cardinality=Cardinality ";")? "}";
		public ParserRule getRule() { return rule; }

		//"method" name=ID_ASML "{" ("matching" matching=STRING ";")? ("cardinality" cardinality=Cardinality ";")? "}"
		public Group getGroup() { return cGroup; }

		//"method"
		public Keyword getMethodKeyword_0() { return cMethodKeyword_0; }

		//name=ID_ASML
		public Assignment getNameAssignment_1() { return cNameAssignment_1; }

		//ID_ASML
		public RuleCall getNameID_ASMLTerminalRuleCall_1_0() { return cNameID_ASMLTerminalRuleCall_1_0; }

		//"{"
		public Keyword getLeftCurlyBracketKeyword_2() { return cLeftCurlyBracketKeyword_2; }

		//("matching" matching=STRING ";")?
		public Group getGroup_3() { return cGroup_3; }

		//"matching"
		public Keyword getMatchingKeyword_3_0() { return cMatchingKeyword_3_0; }

		//matching=STRING
		public Assignment getMatchingAssignment_3_1() { return cMatchingAssignment_3_1; }

		//STRING
		public RuleCall getMatchingSTRINGTerminalRuleCall_3_1_0() { return cMatchingSTRINGTerminalRuleCall_3_1_0; }

		//";"
		public Keyword getSemicolonKeyword_3_2() { return cSemicolonKeyword_3_2; }

		//("cardinality" cardinality=Cardinality ";")?
		public Group getGroup_4() { return cGroup_4; }

		//"cardinality"
		public Keyword getCardinalityKeyword_4_0() { return cCardinalityKeyword_4_0; }

		//cardinality=Cardinality
		public Assignment getCardinalityAssignment_4_1() { return cCardinalityAssignment_4_1; }

		//Cardinality
		public RuleCall getCardinalityCardinalityEnumRuleCall_4_1_0() { return cCardinalityCardinalityEnumRuleCall_4_1_0; }

		//";"
		public Keyword getSemicolonKeyword_4_2() { return cSemicolonKeyword_4_2; }

		//"}"
		public Keyword getRightCurlyBracketKeyword_5() { return cRightCurlyBracketKeyword_5; }
	}

	public class ClassElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "Class");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cClassKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Assignment cNameAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cNameID_ASMLTerminalRuleCall_1_0 = (RuleCall)cNameAssignment_1.eContents().get(0);
		private final Keyword cLeftCurlyBracketKeyword_2 = (Keyword)cGroup.eContents().get(2);
		private final Group cGroup_3 = (Group)cGroup.eContents().get(3);
		private final Keyword cDescriptionKeyword_3_0 = (Keyword)cGroup_3.eContents().get(0);
		private final Assignment cDescriptionAssignment_3_1 = (Assignment)cGroup_3.eContents().get(1);
		private final RuleCall cDescriptionSTRINGTerminalRuleCall_3_1_0 = (RuleCall)cDescriptionAssignment_3_1.eContents().get(0);
		private final Keyword cSemicolonKeyword_3_2 = (Keyword)cGroup_3.eContents().get(2);
		private final Group cGroup_4 = (Group)cGroup.eContents().get(4);
		private final Keyword cMatchingKeyword_4_0 = (Keyword)cGroup_4.eContents().get(0);
		private final Assignment cMatchingAssignment_4_1 = (Assignment)cGroup_4.eContents().get(1);
		private final RuleCall cMatchingAbstractNameConvetionParserRuleCall_4_1_0 = (RuleCall)cMatchingAssignment_4_1.eContents().get(0);
		private final Keyword cSemicolonKeyword_4_2 = (Keyword)cGroup_4.eContents().get(2);
		private final Group cGroup_5 = (Group)cGroup.eContents().get(5);
		private final Keyword cCardinalityKeyword_5_0 = (Keyword)cGroup_5.eContents().get(0);
		private final Assignment cCardinalityAssignment_5_1 = (Assignment)cGroup_5.eContents().get(1);
		private final RuleCall cCardinalityCardinalityEnumRuleCall_5_1_0 = (RuleCall)cCardinalityAssignment_5_1.eContents().get(0);
		private final Keyword cSemicolonKeyword_5_2 = (Keyword)cGroup_5.eContents().get(2);
		private final Assignment cMethodsAssignment_6 = (Assignment)cGroup.eContents().get(6);
		private final RuleCall cMethodsMethodParserRuleCall_6_0 = (RuleCall)cMethodsAssignment_6.eContents().get(0);
		private final Keyword cRightCurlyBracketKeyword_7 = (Keyword)cGroup.eContents().get(7);
		
		//Class:
		//	"class" name=ID_ASML "{" ("description" description=STRING ";")? ("matching:" matching=AbstractNameConvetion ";")?
		//	("cardinality" cardinality=Cardinality ";")? methods+=Method* "}";
		public ParserRule getRule() { return rule; }

		//"class" name=ID_ASML "{" ("description" description=STRING ";")? ("matching:" matching=AbstractNameConvetion ";")?
		//("cardinality" cardinality=Cardinality ";")? methods+=Method* "}"
		public Group getGroup() { return cGroup; }

		//"class"
		public Keyword getClassKeyword_0() { return cClassKeyword_0; }

		//name=ID_ASML
		public Assignment getNameAssignment_1() { return cNameAssignment_1; }

		//ID_ASML
		public RuleCall getNameID_ASMLTerminalRuleCall_1_0() { return cNameID_ASMLTerminalRuleCall_1_0; }

		//"{"
		public Keyword getLeftCurlyBracketKeyword_2() { return cLeftCurlyBracketKeyword_2; }

		//("description" description=STRING ";")?
		public Group getGroup_3() { return cGroup_3; }

		//"description"
		public Keyword getDescriptionKeyword_3_0() { return cDescriptionKeyword_3_0; }

		//description=STRING
		public Assignment getDescriptionAssignment_3_1() { return cDescriptionAssignment_3_1; }

		//STRING
		public RuleCall getDescriptionSTRINGTerminalRuleCall_3_1_0() { return cDescriptionSTRINGTerminalRuleCall_3_1_0; }

		//";"
		public Keyword getSemicolonKeyword_3_2() { return cSemicolonKeyword_3_2; }

		//("matching:" matching=AbstractNameConvetion ";")?
		public Group getGroup_4() { return cGroup_4; }

		//"matching:"
		public Keyword getMatchingKeyword_4_0() { return cMatchingKeyword_4_0; }

		//matching=AbstractNameConvetion
		public Assignment getMatchingAssignment_4_1() { return cMatchingAssignment_4_1; }

		//AbstractNameConvetion
		public RuleCall getMatchingAbstractNameConvetionParserRuleCall_4_1_0() { return cMatchingAbstractNameConvetionParserRuleCall_4_1_0; }

		//";"
		public Keyword getSemicolonKeyword_4_2() { return cSemicolonKeyword_4_2; }

		//("cardinality" cardinality=Cardinality ";")?
		public Group getGroup_5() { return cGroup_5; }

		//"cardinality"
		public Keyword getCardinalityKeyword_5_0() { return cCardinalityKeyword_5_0; }

		//cardinality=Cardinality
		public Assignment getCardinalityAssignment_5_1() { return cCardinalityAssignment_5_1; }

		//Cardinality
		public RuleCall getCardinalityCardinalityEnumRuleCall_5_1_0() { return cCardinalityCardinalityEnumRuleCall_5_1_0; }

		//";"
		public Keyword getSemicolonKeyword_5_2() { return cSemicolonKeyword_5_2; }

		//methods+=Method*
		public Assignment getMethodsAssignment_6() { return cMethodsAssignment_6; }

		//Method
		public RuleCall getMethodsMethodParserRuleCall_6_0() { return cMethodsMethodParserRuleCall_6_0; }

		//"}"
		public Keyword getRightCurlyBracketKeyword_7() { return cRightCurlyBracketKeyword_7; }
	}

	public class XmlElementElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "XmlElement");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cXmlElementKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Assignment cNameAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cNameID_ASMLTerminalRuleCall_1_0 = (RuleCall)cNameAssignment_1.eContents().get(0);
		private final Keyword cLeftCurlyBracketKeyword_2 = (Keyword)cGroup.eContents().get(2);
		private final Group cGroup_3 = (Group)cGroup.eContents().get(3);
		private final Keyword cMatchingKeyword_3_0 = (Keyword)cGroup_3.eContents().get(0);
		private final Assignment cMatchingAssignment_3_1 = (Assignment)cGroup_3.eContents().get(1);
		private final RuleCall cMatchingSTRINGTerminalRuleCall_3_1_0 = (RuleCall)cMatchingAssignment_3_1.eContents().get(0);
		private final Keyword cSemicolonKeyword_3_2 = (Keyword)cGroup_3.eContents().get(2);
		private final Group cGroup_4 = (Group)cGroup.eContents().get(4);
		private final Keyword cCardinalityKeyword_4_0 = (Keyword)cGroup_4.eContents().get(0);
		private final Assignment cCardinalityAssignment_4_1 = (Assignment)cGroup_4.eContents().get(1);
		private final RuleCall cCardinalityCardinalityEnumRuleCall_4_1_0 = (RuleCall)cCardinalityAssignment_4_1.eContents().get(0);
		private final Keyword cSemicolonKeyword_4_2 = (Keyword)cGroup_4.eContents().get(2);
		private final Keyword cRightCurlyBracketKeyword_5 = (Keyword)cGroup.eContents().get(5);
		
		//XmlElement:
		//	"xmlElement" name=ID_ASML "{" ("matching" matching=STRING ";")? ("cardinality" cardinality=Cardinality ";")? "}";
		public ParserRule getRule() { return rule; }

		//"xmlElement" name=ID_ASML "{" ("matching" matching=STRING ";")? ("cardinality" cardinality=Cardinality ";")? "}"
		public Group getGroup() { return cGroup; }

		//"xmlElement"
		public Keyword getXmlElementKeyword_0() { return cXmlElementKeyword_0; }

		//name=ID_ASML
		public Assignment getNameAssignment_1() { return cNameAssignment_1; }

		//ID_ASML
		public RuleCall getNameID_ASMLTerminalRuleCall_1_0() { return cNameID_ASMLTerminalRuleCall_1_0; }

		//"{"
		public Keyword getLeftCurlyBracketKeyword_2() { return cLeftCurlyBracketKeyword_2; }

		//("matching" matching=STRING ";")?
		public Group getGroup_3() { return cGroup_3; }

		//"matching"
		public Keyword getMatchingKeyword_3_0() { return cMatchingKeyword_3_0; }

		//matching=STRING
		public Assignment getMatchingAssignment_3_1() { return cMatchingAssignment_3_1; }

		//STRING
		public RuleCall getMatchingSTRINGTerminalRuleCall_3_1_0() { return cMatchingSTRINGTerminalRuleCall_3_1_0; }

		//";"
		public Keyword getSemicolonKeyword_3_2() { return cSemicolonKeyword_3_2; }

		//("cardinality" cardinality=Cardinality ";")?
		public Group getGroup_4() { return cGroup_4; }

		//"cardinality"
		public Keyword getCardinalityKeyword_4_0() { return cCardinalityKeyword_4_0; }

		//cardinality=Cardinality
		public Assignment getCardinalityAssignment_4_1() { return cCardinalityAssignment_4_1; }

		//Cardinality
		public RuleCall getCardinalityCardinalityEnumRuleCall_4_1_0() { return cCardinalityCardinalityEnumRuleCall_4_1_0; }

		//";"
		public Keyword getSemicolonKeyword_4_2() { return cSemicolonKeyword_4_2; }

		//"}"
		public Keyword getRightCurlyBracketKeyword_5() { return cRightCurlyBracketKeyword_5; }
	}

	public class XmlDocumentElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "XmlDocument");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cXmlDocumentKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Assignment cNameAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cNameID_ASMLTerminalRuleCall_1_0 = (RuleCall)cNameAssignment_1.eContents().get(0);
		private final Keyword cLeftCurlyBracketKeyword_2 = (Keyword)cGroup.eContents().get(2);
		private final Group cGroup_3 = (Group)cGroup.eContents().get(3);
		private final Keyword cMatchingKeyword_3_0 = (Keyword)cGroup_3.eContents().get(0);
		private final Assignment cMatchingAssignment_3_1 = (Assignment)cGroup_3.eContents().get(1);
		private final RuleCall cMatchingSTRINGTerminalRuleCall_3_1_0 = (RuleCall)cMatchingAssignment_3_1.eContents().get(0);
		private final Keyword cSemicolonKeyword_3_2 = (Keyword)cGroup_3.eContents().get(2);
		private final Group cGroup_4 = (Group)cGroup.eContents().get(4);
		private final Keyword cCardinalityKeyword_4_0 = (Keyword)cGroup_4.eContents().get(0);
		private final Assignment cCardinalityAssignment_4_1 = (Assignment)cGroup_4.eContents().get(1);
		private final RuleCall cCardinalityCardinalityEnumRuleCall_4_1_0 = (RuleCall)cCardinalityAssignment_4_1.eContents().get(0);
		private final Keyword cSemicolonKeyword_4_2 = (Keyword)cGroup_4.eContents().get(2);
		private final Keyword cRightCurlyBracketKeyword_5 = (Keyword)cGroup.eContents().get(5);
		
		//XmlDocument:
		//	"xmlDocument" name=ID_ASML "{" ("matching" matching=STRING ";")? ("cardinality" cardinality=Cardinality ";")? "}";
		public ParserRule getRule() { return rule; }

		//"xmlDocument" name=ID_ASML "{" ("matching" matching=STRING ";")? ("cardinality" cardinality=Cardinality ";")? "}"
		public Group getGroup() { return cGroup; }

		//"xmlDocument"
		public Keyword getXmlDocumentKeyword_0() { return cXmlDocumentKeyword_0; }

		//name=ID_ASML
		public Assignment getNameAssignment_1() { return cNameAssignment_1; }

		//ID_ASML
		public RuleCall getNameID_ASMLTerminalRuleCall_1_0() { return cNameID_ASMLTerminalRuleCall_1_0; }

		//"{"
		public Keyword getLeftCurlyBracketKeyword_2() { return cLeftCurlyBracketKeyword_2; }

		//("matching" matching=STRING ";")?
		public Group getGroup_3() { return cGroup_3; }

		//"matching"
		public Keyword getMatchingKeyword_3_0() { return cMatchingKeyword_3_0; }

		//matching=STRING
		public Assignment getMatchingAssignment_3_1() { return cMatchingAssignment_3_1; }

		//STRING
		public RuleCall getMatchingSTRINGTerminalRuleCall_3_1_0() { return cMatchingSTRINGTerminalRuleCall_3_1_0; }

		//";"
		public Keyword getSemicolonKeyword_3_2() { return cSemicolonKeyword_3_2; }

		//("cardinality" cardinality=Cardinality ";")?
		public Group getGroup_4() { return cGroup_4; }

		//"cardinality"
		public Keyword getCardinalityKeyword_4_0() { return cCardinalityKeyword_4_0; }

		//cardinality=Cardinality
		public Assignment getCardinalityAssignment_4_1() { return cCardinalityAssignment_4_1; }

		//Cardinality
		public RuleCall getCardinalityCardinalityEnumRuleCall_4_1_0() { return cCardinalityCardinalityEnumRuleCall_4_1_0; }

		//";"
		public Keyword getSemicolonKeyword_4_2() { return cSemicolonKeyword_4_2; }

		//"}"
		public Keyword getRightCurlyBracketKeyword_5() { return cRightCurlyBracketKeyword_5; }
	}

	public class LayerElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "Layer");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cLayerKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Assignment cNameAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cNameID_ASMLTerminalRuleCall_1_0 = (RuleCall)cNameAssignment_1.eContents().get(0);
		private final Keyword cLeftCurlyBracketKeyword_2 = (Keyword)cGroup.eContents().get(2);
		private final Group cGroup_3 = (Group)cGroup.eContents().get(3);
		private final Keyword cMatchingKeyword_3_0 = (Keyword)cGroup_3.eContents().get(0);
		private final Assignment cMatchingAssignment_3_1 = (Assignment)cGroup_3.eContents().get(1);
		private final RuleCall cMatchingLayerMatchingParserRuleCall_3_1_0 = (RuleCall)cMatchingAssignment_3_1.eContents().get(0);
		private final Keyword cSemicolonKeyword_3_2 = (Keyword)cGroup_3.eContents().get(2);
		private final Assignment cModulesAssignment_4 = (Assignment)cGroup.eContents().get(4);
		private final RuleCall cModulesModuleParserRuleCall_4_0 = (RuleCall)cModulesAssignment_4.eContents().get(0);
		private final Assignment cRestrictionsAssignment_5 = (Assignment)cGroup.eContents().get(5);
		private final RuleCall cRestrictionsRestrictionParserRuleCall_5_0 = (RuleCall)cRestrictionsAssignment_5.eContents().get(0);
		private final Keyword cRightCurlyBracketKeyword_6 = (Keyword)cGroup.eContents().get(6);
		
		//Layer:
		//	"layer" name=ID_ASML "{" ("matching" matching=LayerMatching ";")? modules+=Module* restrictions+=Restriction* "}";
		public ParserRule getRule() { return rule; }

		//"layer" name=ID_ASML "{" ("matching" matching=LayerMatching ";")? modules+=Module* restrictions+=Restriction* "}"
		public Group getGroup() { return cGroup; }

		//"layer"
		public Keyword getLayerKeyword_0() { return cLayerKeyword_0; }

		//name=ID_ASML
		public Assignment getNameAssignment_1() { return cNameAssignment_1; }

		//ID_ASML
		public RuleCall getNameID_ASMLTerminalRuleCall_1_0() { return cNameID_ASMLTerminalRuleCall_1_0; }

		//"{"
		public Keyword getLeftCurlyBracketKeyword_2() { return cLeftCurlyBracketKeyword_2; }

		//("matching" matching=LayerMatching ";")?
		public Group getGroup_3() { return cGroup_3; }

		//"matching"
		public Keyword getMatchingKeyword_3_0() { return cMatchingKeyword_3_0; }

		//matching=LayerMatching
		public Assignment getMatchingAssignment_3_1() { return cMatchingAssignment_3_1; }

		//LayerMatching
		public RuleCall getMatchingLayerMatchingParserRuleCall_3_1_0() { return cMatchingLayerMatchingParserRuleCall_3_1_0; }

		//";"
		public Keyword getSemicolonKeyword_3_2() { return cSemicolonKeyword_3_2; }

		//modules+=Module*
		public Assignment getModulesAssignment_4() { return cModulesAssignment_4; }

		//Module
		public RuleCall getModulesModuleParserRuleCall_4_0() { return cModulesModuleParserRuleCall_4_0; }

		//restrictions+=Restriction*
		public Assignment getRestrictionsAssignment_5() { return cRestrictionsAssignment_5; }

		//Restriction
		public RuleCall getRestrictionsRestrictionParserRuleCall_5_0() { return cRestrictionsRestrictionParserRuleCall_5_0; }

		//"}"
		public Keyword getRightCurlyBracketKeyword_6() { return cRightCurlyBracketKeyword_6; }
	}

	public class ModuleElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "Module");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cModuleKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Assignment cNameAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cNameID_ASMLTerminalRuleCall_1_0 = (RuleCall)cNameAssignment_1.eContents().get(0);
		private final Keyword cLeftCurlyBracketKeyword_2 = (Keyword)cGroup.eContents().get(2);
		private final Group cGroup_3 = (Group)cGroup.eContents().get(3);
		private final Group cGroup_3_0 = (Group)cGroup_3.eContents().get(0);
		private final Keyword cAttributesKeyword_3_0_0 = (Keyword)cGroup_3_0.eContents().get(0);
		private final Assignment cAttributesAssignment_3_0_1 = (Assignment)cGroup_3_0.eContents().get(1);
		private final RuleCall cAttributesAttributeParserRuleCall_3_0_1_0 = (RuleCall)cAttributesAssignment_3_0_1.eContents().get(0);
		private final Keyword cCommaKeyword_3_0_2 = (Keyword)cGroup_3_0.eContents().get(2);
		private final Keyword cSemicolonKeyword_3_1 = (Keyword)cGroup_3.eContents().get(1);
		private final Group cGroup_4 = (Group)cGroup.eContents().get(4);
		private final Keyword cMatchingKeyword_4_0 = (Keyword)cGroup_4.eContents().get(0);
		private final Assignment cMatchingAssignment_4_1 = (Assignment)cGroup_4.eContents().get(1);
		private final RuleCall cMatchingModuleMatchingParserRuleCall_4_1_0 = (RuleCall)cMatchingAssignment_4_1.eContents().get(0);
		private final Keyword cSemicolonKeyword_4_2 = (Keyword)cGroup_4.eContents().get(2);
		private final Assignment cComponentsAssignment_5 = (Assignment)cGroup.eContents().get(5);
		private final RuleCall cComponentsAbstractComponentParserRuleCall_5_0 = (RuleCall)cComponentsAssignment_5.eContents().get(0);
		private final Assignment cRestrictionsAssignment_6 = (Assignment)cGroup.eContents().get(6);
		private final RuleCall cRestrictionsRestrictionParserRuleCall_6_0 = (RuleCall)cRestrictionsAssignment_6.eContents().get(0);
		private final Keyword cRightCurlyBracketKeyword_7 = (Keyword)cGroup.eContents().get(7);
		
		//Module:
		//	"module" name=ID_ASML "{" (("attributes" attributes+=Attribute ","?)* ";")? ("matching" matching=ModuleMatching ";")?
		//	components+=AbstractComponent* restrictions+=Restriction* "}";
		public ParserRule getRule() { return rule; }

		//"module" name=ID_ASML "{" (("attributes" attributes+=Attribute ","?)* ";")? ("matching" matching=ModuleMatching ";")?
		//components+=AbstractComponent* restrictions+=Restriction* "}"
		public Group getGroup() { return cGroup; }

		//"module"
		public Keyword getModuleKeyword_0() { return cModuleKeyword_0; }

		//name=ID_ASML
		public Assignment getNameAssignment_1() { return cNameAssignment_1; }

		//ID_ASML
		public RuleCall getNameID_ASMLTerminalRuleCall_1_0() { return cNameID_ASMLTerminalRuleCall_1_0; }

		//"{"
		public Keyword getLeftCurlyBracketKeyword_2() { return cLeftCurlyBracketKeyword_2; }

		//(("attributes" attributes+=Attribute ","?)* ";")?
		public Group getGroup_3() { return cGroup_3; }

		//("attributes" attributes+=Attribute ","?)*
		public Group getGroup_3_0() { return cGroup_3_0; }

		//"attributes"
		public Keyword getAttributesKeyword_3_0_0() { return cAttributesKeyword_3_0_0; }

		//attributes+=Attribute
		public Assignment getAttributesAssignment_3_0_1() { return cAttributesAssignment_3_0_1; }

		//Attribute
		public RuleCall getAttributesAttributeParserRuleCall_3_0_1_0() { return cAttributesAttributeParserRuleCall_3_0_1_0; }

		//","?
		public Keyword getCommaKeyword_3_0_2() { return cCommaKeyword_3_0_2; }

		//";"
		public Keyword getSemicolonKeyword_3_1() { return cSemicolonKeyword_3_1; }

		//("matching" matching=ModuleMatching ";")?
		public Group getGroup_4() { return cGroup_4; }

		//"matching"
		public Keyword getMatchingKeyword_4_0() { return cMatchingKeyword_4_0; }

		//matching=ModuleMatching
		public Assignment getMatchingAssignment_4_1() { return cMatchingAssignment_4_1; }

		//ModuleMatching
		public RuleCall getMatchingModuleMatchingParserRuleCall_4_1_0() { return cMatchingModuleMatchingParserRuleCall_4_1_0; }

		//";"
		public Keyword getSemicolonKeyword_4_2() { return cSemicolonKeyword_4_2; }

		//components+=AbstractComponent*
		public Assignment getComponentsAssignment_5() { return cComponentsAssignment_5; }

		//AbstractComponent
		public RuleCall getComponentsAbstractComponentParserRuleCall_5_0() { return cComponentsAbstractComponentParserRuleCall_5_0; }

		//restrictions+=Restriction*
		public Assignment getRestrictionsAssignment_6() { return cRestrictionsAssignment_6; }

		//Restriction
		public RuleCall getRestrictionsRestrictionParserRuleCall_6_0() { return cRestrictionsRestrictionParserRuleCall_6_0; }

		//"}"
		public Keyword getRightCurlyBracketKeyword_7() { return cRightCurlyBracketKeyword_7; }
	}

	public class MetaModuleElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "MetaModule");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cMetaModuleKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Assignment cNameAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cNameID_ASMLTerminalRuleCall_1_0 = (RuleCall)cNameAssignment_1.eContents().get(0);
		private final Keyword cLeftCurlyBracketKeyword_2 = (Keyword)cGroup.eContents().get(2);
		private final Group cGroup_3 = (Group)cGroup.eContents().get(3);
		private final Group cGroup_3_0 = (Group)cGroup_3.eContents().get(0);
		private final Keyword cAttributesKeyword_3_0_0 = (Keyword)cGroup_3_0.eContents().get(0);
		private final Assignment cAttributesAssignment_3_0_1 = (Assignment)cGroup_3_0.eContents().get(1);
		private final RuleCall cAttributesAttributeParserRuleCall_3_0_1_0 = (RuleCall)cAttributesAssignment_3_0_1.eContents().get(0);
		private final Keyword cCommaKeyword_3_0_2 = (Keyword)cGroup_3_0.eContents().get(2);
		private final Keyword cSemicolonKeyword_3_1 = (Keyword)cGroup_3.eContents().get(1);
		private final Group cGroup_4 = (Group)cGroup.eContents().get(4);
		private final Keyword cMatchingKeyword_4_0 = (Keyword)cGroup_4.eContents().get(0);
		private final Assignment cMatchingAssignment_4_1 = (Assignment)cGroup_4.eContents().get(1);
		private final RuleCall cMatchingModuleMatchingParserRuleCall_4_1_0 = (RuleCall)cMatchingAssignment_4_1.eContents().get(0);
		private final Keyword cSemicolonKeyword_4_2 = (Keyword)cGroup_4.eContents().get(2);
		private final Assignment cComponentsAssignment_5 = (Assignment)cGroup.eContents().get(5);
		private final RuleCall cComponentsAbstractComponentParserRuleCall_5_0 = (RuleCall)cComponentsAssignment_5.eContents().get(0);
		private final Assignment cRestrictionsAssignment_6 = (Assignment)cGroup.eContents().get(6);
		private final RuleCall cRestrictionsRestrictionParserRuleCall_6_0 = (RuleCall)cRestrictionsAssignment_6.eContents().get(0);
		private final Keyword cRightCurlyBracketKeyword_7 = (Keyword)cGroup.eContents().get(7);
		
		//MetaModule:
		//	"meta-module" name=ID_ASML "{" (("attributes" attributes+=Attribute ","?)* ";")? ("matching" matching=ModuleMatching
		//	";")? components+=AbstractComponent* restrictions+=Restriction* "}";
		public ParserRule getRule() { return rule; }

		//"meta-module" name=ID_ASML "{" (("attributes" attributes+=Attribute ","?)* ";")? ("matching" matching=ModuleMatching
		//";")? components+=AbstractComponent* restrictions+=Restriction* "}"
		public Group getGroup() { return cGroup; }

		//"meta-module"
		public Keyword getMetaModuleKeyword_0() { return cMetaModuleKeyword_0; }

		//name=ID_ASML
		public Assignment getNameAssignment_1() { return cNameAssignment_1; }

		//ID_ASML
		public RuleCall getNameID_ASMLTerminalRuleCall_1_0() { return cNameID_ASMLTerminalRuleCall_1_0; }

		//"{"
		public Keyword getLeftCurlyBracketKeyword_2() { return cLeftCurlyBracketKeyword_2; }

		//(("attributes" attributes+=Attribute ","?)* ";")?
		public Group getGroup_3() { return cGroup_3; }

		//("attributes" attributes+=Attribute ","?)*
		public Group getGroup_3_0() { return cGroup_3_0; }

		//"attributes"
		public Keyword getAttributesKeyword_3_0_0() { return cAttributesKeyword_3_0_0; }

		//attributes+=Attribute
		public Assignment getAttributesAssignment_3_0_1() { return cAttributesAssignment_3_0_1; }

		//Attribute
		public RuleCall getAttributesAttributeParserRuleCall_3_0_1_0() { return cAttributesAttributeParserRuleCall_3_0_1_0; }

		//","?
		public Keyword getCommaKeyword_3_0_2() { return cCommaKeyword_3_0_2; }

		//";"
		public Keyword getSemicolonKeyword_3_1() { return cSemicolonKeyword_3_1; }

		//("matching" matching=ModuleMatching ";")?
		public Group getGroup_4() { return cGroup_4; }

		//"matching"
		public Keyword getMatchingKeyword_4_0() { return cMatchingKeyword_4_0; }

		//matching=ModuleMatching
		public Assignment getMatchingAssignment_4_1() { return cMatchingAssignment_4_1; }

		//ModuleMatching
		public RuleCall getMatchingModuleMatchingParserRuleCall_4_1_0() { return cMatchingModuleMatchingParserRuleCall_4_1_0; }

		//";"
		public Keyword getSemicolonKeyword_4_2() { return cSemicolonKeyword_4_2; }

		//components+=AbstractComponent*
		public Assignment getComponentsAssignment_5() { return cComponentsAssignment_5; }

		//AbstractComponent
		public RuleCall getComponentsAbstractComponentParserRuleCall_5_0() { return cComponentsAbstractComponentParserRuleCall_5_0; }

		//restrictions+=Restriction*
		public Assignment getRestrictionsAssignment_6() { return cRestrictionsAssignment_6; }

		//Restriction
		public RuleCall getRestrictionsRestrictionParserRuleCall_6_0() { return cRestrictionsRestrictionParserRuleCall_6_0; }

		//"}"
		public Keyword getRightCurlyBracketKeyword_7() { return cRightCurlyBracketKeyword_7; }
	}

	public class QualifiedNameElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "QualifiedName");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final RuleCall cID_ASMLTerminalRuleCall_0 = (RuleCall)cGroup.eContents().get(0);
		private final Group cGroup_1 = (Group)cGroup.eContents().get(1);
		private final Keyword cFullStopKeyword_1_0 = (Keyword)cGroup_1.eContents().get(0);
		private final RuleCall cID_ASMLTerminalRuleCall_1_1 = (RuleCall)cGroup_1.eContents().get(1);
		
		//QualifiedName:
		//	ID_ASML ("." ID_ASML)*;
		public ParserRule getRule() { return rule; }

		//ID_ASML ("." ID_ASML)*
		public Group getGroup() { return cGroup; }

		//ID_ASML
		public RuleCall getID_ASMLTerminalRuleCall_0() { return cID_ASMLTerminalRuleCall_0; }

		//("." ID_ASML)*
		public Group getGroup_1() { return cGroup_1; }

		//"."
		public Keyword getFullStopKeyword_1_0() { return cFullStopKeyword_1_0; }

		//ID_ASML
		public RuleCall getID_ASMLTerminalRuleCall_1_1() { return cID_ASMLTerminalRuleCall_1_1; }
	}

	public class RestrictionElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "Restriction");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cRestrictionKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Keyword cLeftCurlyBracketKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Assignment cGroupClauseAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final RuleCall cGroupClauseGroupClauseEnumRuleCall_2_0 = (RuleCall)cGroupClauseAssignment_2.eContents().get(0);
		private final Assignment cComponentAAssignment_3 = (Assignment)cGroup.eContents().get(3);
		private final CrossReference cComponentAAbstractComponentCrossReference_3_0 = (CrossReference)cComponentAAssignment_3.eContents().get(0);
		private final RuleCall cComponentAAbstractComponentQualifiedNameParserRuleCall_3_0_1 = (RuleCall)cComponentAAbstractComponentCrossReference_3_0.eContents().get(1);
		private final Assignment cPermissionClauseAssignment_4 = (Assignment)cGroup.eContents().get(4);
		private final RuleCall cPermissionClausePermissionClauseEnumRuleCall_4_0 = (RuleCall)cPermissionClauseAssignment_4.eContents().get(0);
		private final Assignment cRelactionTypeAssignment_5 = (Assignment)cGroup.eContents().get(5);
		private final RuleCall cRelactionTypeRelactionTypeEnumRuleCall_5_0 = (RuleCall)cRelactionTypeAssignment_5.eContents().get(0);
		private final Assignment cComponentBAssignment_6 = (Assignment)cGroup.eContents().get(6);
		private final CrossReference cComponentBAbstractComponentCrossReference_6_0 = (CrossReference)cComponentBAssignment_6.eContents().get(0);
		private final RuleCall cComponentBAbstractComponentQualifiedNameParserRuleCall_6_0_1 = (RuleCall)cComponentBAbstractComponentCrossReference_6_0.eContents().get(1);
		private final Keyword cRightCurlyBracketKeyword_7 = (Keyword)cGroup.eContents().get(7);
		
		//// Criar uma tipo para abarcar todos os atributos básicos, e assim evitar redundância e o uso exessivo de instanceof ao utilizar a linguagem programaticamente.
		//Restriction:
		//	"restriction" "{" groupClause=GroupClause? componentA+=[AbstractComponent|QualifiedName]*
		//	permissionClause=PermissionClause? relactionType=RelactionType componentB=[AbstractComponent|QualifiedName] "}";
		public ParserRule getRule() { return rule; }

		//"restriction" "{" groupClause=GroupClause? componentA+=[AbstractComponent|QualifiedName]*
		//permissionClause=PermissionClause? relactionType=RelactionType componentB=[AbstractComponent|QualifiedName] "}"
		public Group getGroup() { return cGroup; }

		//"restriction"
		public Keyword getRestrictionKeyword_0() { return cRestrictionKeyword_0; }

		//"{"
		public Keyword getLeftCurlyBracketKeyword_1() { return cLeftCurlyBracketKeyword_1; }

		//groupClause=GroupClause?
		public Assignment getGroupClauseAssignment_2() { return cGroupClauseAssignment_2; }

		//GroupClause
		public RuleCall getGroupClauseGroupClauseEnumRuleCall_2_0() { return cGroupClauseGroupClauseEnumRuleCall_2_0; }

		//componentA+=[AbstractComponent|QualifiedName]*
		public Assignment getComponentAAssignment_3() { return cComponentAAssignment_3; }

		//[AbstractComponent|QualifiedName]
		public CrossReference getComponentAAbstractComponentCrossReference_3_0() { return cComponentAAbstractComponentCrossReference_3_0; }

		//QualifiedName
		public RuleCall getComponentAAbstractComponentQualifiedNameParserRuleCall_3_0_1() { return cComponentAAbstractComponentQualifiedNameParserRuleCall_3_0_1; }

		//permissionClause=PermissionClause?
		public Assignment getPermissionClauseAssignment_4() { return cPermissionClauseAssignment_4; }

		//PermissionClause
		public RuleCall getPermissionClausePermissionClauseEnumRuleCall_4_0() { return cPermissionClausePermissionClauseEnumRuleCall_4_0; }

		//relactionType=RelactionType
		public Assignment getRelactionTypeAssignment_5() { return cRelactionTypeAssignment_5; }

		//RelactionType
		public RuleCall getRelactionTypeRelactionTypeEnumRuleCall_5_0() { return cRelactionTypeRelactionTypeEnumRuleCall_5_0; }

		//componentB=[AbstractComponent|QualifiedName]
		public Assignment getComponentBAssignment_6() { return cComponentBAssignment_6; }

		//[AbstractComponent|QualifiedName]
		public CrossReference getComponentBAbstractComponentCrossReference_6_0() { return cComponentBAbstractComponentCrossReference_6_0; }

		//QualifiedName
		public RuleCall getComponentBAbstractComponentQualifiedNameParserRuleCall_6_0_1() { return cComponentBAbstractComponentQualifiedNameParserRuleCall_6_0_1; }

		//"}"
		public Keyword getRightCurlyBracketKeyword_7() { return cRightCurlyBracketKeyword_7; }
	}
	
	
	public class CardinalityElements extends AbstractEnumRuleElementFinder {
		private final EnumRule rule = (EnumRule) GrammarUtil.findRuleForName(getGrammar(), "Cardinality");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final EnumLiteralDeclaration cOneEnumLiteralDeclaration_0 = (EnumLiteralDeclaration)cAlternatives.eContents().get(0);
		private final Keyword cOne1Keyword_0_0 = (Keyword)cOneEnumLiteralDeclaration_0.eContents().get(0);
		private final EnumLiteralDeclaration cZeroEnumLiteralDeclaration_1 = (EnumLiteralDeclaration)cAlternatives.eContents().get(1);
		private final Keyword cZero0Keyword_1_0 = (Keyword)cZeroEnumLiteralDeclaration_1.eContents().get(0);
		private final EnumLiteralDeclaration cOneOrManyEnumLiteralDeclaration_2 = (EnumLiteralDeclaration)cAlternatives.eContents().get(2);
		private final Keyword cOneOrMany1Keyword_2_0 = (Keyword)cOneOrManyEnumLiteralDeclaration_2.eContents().get(0);
		private final EnumLiteralDeclaration cZeroOrManyEnumLiteralDeclaration_3 = (EnumLiteralDeclaration)cAlternatives.eContents().get(3);
		private final Keyword cZeroOrMany0Keyword_3_0 = (Keyword)cZeroOrManyEnumLiteralDeclaration_3.eContents().get(0);
		
		//enum Cardinality:
		//	One="1" | Zero="0" | OneOrMany="1..*" | ZeroOrMany="0..*";
		public EnumRule getRule() { return rule; }

		//One="1" | Zero="0" | OneOrMany="1..*" | ZeroOrMany="0..*"
		public Alternatives getAlternatives() { return cAlternatives; }

		//One="1"
		public EnumLiteralDeclaration getOneEnumLiteralDeclaration_0() { return cOneEnumLiteralDeclaration_0; }

		//"1"
		public Keyword getOne1Keyword_0_0() { return cOne1Keyword_0_0; }

		//Zero="0"
		public EnumLiteralDeclaration getZeroEnumLiteralDeclaration_1() { return cZeroEnumLiteralDeclaration_1; }

		//"0"
		public Keyword getZero0Keyword_1_0() { return cZero0Keyword_1_0; }

		//OneOrMany="1..*"
		public EnumLiteralDeclaration getOneOrManyEnumLiteralDeclaration_2() { return cOneOrManyEnumLiteralDeclaration_2; }

		//"1..*"
		public Keyword getOneOrMany1Keyword_2_0() { return cOneOrMany1Keyword_2_0; }

		//ZeroOrMany="0..*"
		public EnumLiteralDeclaration getZeroOrManyEnumLiteralDeclaration_3() { return cZeroOrManyEnumLiteralDeclaration_3; }

		//"0..*"
		public Keyword getZeroOrMany0Keyword_3_0() { return cZeroOrMany0Keyword_3_0; }
	}

	public class ExpressionMatchingClauseElements extends AbstractEnumRuleElementFinder {
		private final EnumRule rule = (EnumRule) GrammarUtil.findRuleForName(getGrammar(), "ExpressionMatchingClause");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final EnumLiteralDeclaration cNAME_START_WITHEnumLiteralDeclaration_0 = (EnumLiteralDeclaration)cAlternatives.eContents().get(0);
		private final Keyword cNAME_START_WITHNameStartWithKeyword_0_0 = (Keyword)cNAME_START_WITHEnumLiteralDeclaration_0.eContents().get(0);
		private final EnumLiteralDeclaration cNAME_ENDS_WITHEnumLiteralDeclaration_1 = (EnumLiteralDeclaration)cAlternatives.eContents().get(1);
		private final Keyword cNAME_ENDS_WITHNameEndsWithKeyword_1_0 = (Keyword)cNAME_ENDS_WITHEnumLiteralDeclaration_1.eContents().get(0);
		
		//enum ExpressionMatchingClause:
		//	NAME_START_WITH="name start with" | NAME_ENDS_WITH="name ends with";
		public EnumRule getRule() { return rule; }

		//NAME_START_WITH="name start with" | NAME_ENDS_WITH="name ends with"
		public Alternatives getAlternatives() { return cAlternatives; }

		//NAME_START_WITH="name start with"
		public EnumLiteralDeclaration getNAME_START_WITHEnumLiteralDeclaration_0() { return cNAME_START_WITHEnumLiteralDeclaration_0; }

		//"name start with"
		public Keyword getNAME_START_WITHNameStartWithKeyword_0_0() { return cNAME_START_WITHNameStartWithKeyword_0_0; }

		//NAME_ENDS_WITH="name ends with"
		public EnumLiteralDeclaration getNAME_ENDS_WITHEnumLiteralDeclaration_1() { return cNAME_ENDS_WITHEnumLiteralDeclaration_1; }

		//"name ends with"
		public Keyword getNAME_ENDS_WITHNameEndsWithKeyword_1_0() { return cNAME_ENDS_WITHNameEndsWithKeyword_1_0; }
	}

	public class LayerMatchingClauseElements extends AbstractEnumRuleElementFinder {
		private final EnumRule rule = (EnumRule) GrammarUtil.findRuleForName(getGrammar(), "LayerMatchingClause");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final EnumLiteralDeclaration cRELATED_TO_COMPONENTEnumLiteralDeclaration_0 = (EnumLiteralDeclaration)cAlternatives.eContents().get(0);
		private final Keyword cRELATED_TO_COMPONENTRelatedToComponentKeyword_0_0 = (Keyword)cRELATED_TO_COMPONENTEnumLiteralDeclaration_0.eContents().get(0);
		private final EnumLiteralDeclaration cEXTERNAL_DEFINITIONEnumLiteralDeclaration_1 = (EnumLiteralDeclaration)cAlternatives.eContents().get(1);
		private final Keyword cEXTERNAL_DEFINITIONExternalDefinitionKeyword_1_0 = (Keyword)cEXTERNAL_DEFINITIONEnumLiteralDeclaration_1.eContents().get(0);
		
		//enum LayerMatchingClause:
		//	RELATED_TO_COMPONENT="related to component" | EXTERNAL_DEFINITION="external definition";
		public EnumRule getRule() { return rule; }

		//RELATED_TO_COMPONENT="related to component" | EXTERNAL_DEFINITION="external definition"
		public Alternatives getAlternatives() { return cAlternatives; }

		//RELATED_TO_COMPONENT="related to component"
		public EnumLiteralDeclaration getRELATED_TO_COMPONENTEnumLiteralDeclaration_0() { return cRELATED_TO_COMPONENTEnumLiteralDeclaration_0; }

		//"related to component"
		public Keyword getRELATED_TO_COMPONENTRelatedToComponentKeyword_0_0() { return cRELATED_TO_COMPONENTRelatedToComponentKeyword_0_0; }

		//EXTERNAL_DEFINITION="external definition"
		public EnumLiteralDeclaration getEXTERNAL_DEFINITIONEnumLiteralDeclaration_1() { return cEXTERNAL_DEFINITIONEnumLiteralDeclaration_1; }

		//"external definition"
		public Keyword getEXTERNAL_DEFINITIONExternalDefinitionKeyword_1_0() { return cEXTERNAL_DEFINITIONExternalDefinitionKeyword_1_0; }
	}

	public class ModuleMatchingParamenterElements extends AbstractEnumRuleElementFinder {
		private final EnumRule rule = (EnumRule) GrammarUtil.findRuleForName(getGrammar(), "ModuleMatchingParamenter");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final EnumLiteralDeclaration cPAKCAGEEnumLiteralDeclaration_0 = (EnumLiteralDeclaration)cAlternatives.eContents().get(0);
		private final Keyword cPAKCAGEByPackageNameKeyword_0_0 = (Keyword)cPAKCAGEEnumLiteralDeclaration_0.eContents().get(0);
		private final EnumLiteralDeclaration cFOLDEREnumLiteralDeclaration_1 = (EnumLiteralDeclaration)cAlternatives.eContents().get(1);
		private final Keyword cFOLDERByFolderNameKeyword_1_0 = (Keyword)cFOLDEREnumLiteralDeclaration_1.eContents().get(0);
		private final EnumLiteralDeclaration cPAKCAGE_AND_FOLDEREnumLiteralDeclaration_2 = (EnumLiteralDeclaration)cAlternatives.eContents().get(2);
		private final Keyword cPAKCAGE_AND_FOLDERByPackageAndFolderNameKeyword_2_0 = (Keyword)cPAKCAGE_AND_FOLDEREnumLiteralDeclaration_2.eContents().get(0);
		private final EnumLiteralDeclaration cEXTERNAL_DEFINITIONEnumLiteralDeclaration_3 = (EnumLiteralDeclaration)cAlternatives.eContents().get(3);
		private final Keyword cEXTERNAL_DEFINITIONByExternalImplementationKeyword_3_0 = (Keyword)cEXTERNAL_DEFINITIONEnumLiteralDeclaration_3.eContents().get(0);
		
		//enum ModuleMatchingParamenter:
		//	PAKCAGE="by package name" | FOLDER="by folder name" | PAKCAGE_AND_FOLDER="by package and folder name" |
		//	EXTERNAL_DEFINITION="by external implementation";
		public EnumRule getRule() { return rule; }

		//PAKCAGE="by package name" | FOLDER="by folder name" | PAKCAGE_AND_FOLDER="by package and folder name" |
		//EXTERNAL_DEFINITION="by external implementation"
		public Alternatives getAlternatives() { return cAlternatives; }

		//PAKCAGE="by package name"
		public EnumLiteralDeclaration getPAKCAGEEnumLiteralDeclaration_0() { return cPAKCAGEEnumLiteralDeclaration_0; }

		//"by package name"
		public Keyword getPAKCAGEByPackageNameKeyword_0_0() { return cPAKCAGEByPackageNameKeyword_0_0; }

		//FOLDER="by folder name"
		public EnumLiteralDeclaration getFOLDEREnumLiteralDeclaration_1() { return cFOLDEREnumLiteralDeclaration_1; }

		//"by folder name"
		public Keyword getFOLDERByFolderNameKeyword_1_0() { return cFOLDERByFolderNameKeyword_1_0; }

		//PAKCAGE_AND_FOLDER="by package and folder name"
		public EnumLiteralDeclaration getPAKCAGE_AND_FOLDEREnumLiteralDeclaration_2() { return cPAKCAGE_AND_FOLDEREnumLiteralDeclaration_2; }

		//"by package and folder name"
		public Keyword getPAKCAGE_AND_FOLDERByPackageAndFolderNameKeyword_2_0() { return cPAKCAGE_AND_FOLDERByPackageAndFolderNameKeyword_2_0; }

		//EXTERNAL_DEFINITION="by external implementation"
		public EnumLiteralDeclaration getEXTERNAL_DEFINITIONEnumLiteralDeclaration_3() { return cEXTERNAL_DEFINITIONEnumLiteralDeclaration_3; }

		//"by external implementation"
		public Keyword getEXTERNAL_DEFINITIONByExternalImplementationKeyword_3_0() { return cEXTERNAL_DEFINITIONByExternalImplementationKeyword_3_0; }
	}

	public class GroupClauseElements extends AbstractEnumRuleElementFinder {
		private final EnumRule rule = (EnumRule) GrammarUtil.findRuleForName(getGrammar(), "GroupClause");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final EnumLiteralDeclaration cNULLEnumLiteralDeclaration_0 = (EnumLiteralDeclaration)cAlternatives.eContents().get(0);
		private final Keyword cNULLNullKeyword_0_0 = (Keyword)cNULLEnumLiteralDeclaration_0.eContents().get(0);
		private final EnumLiteralDeclaration cONLYEnumLiteralDeclaration_1 = (EnumLiteralDeclaration)cAlternatives.eContents().get(1);
		private final Keyword cONLYOnlyKeyword_1_0 = (Keyword)cONLYEnumLiteralDeclaration_1.eContents().get(0);
		private final EnumLiteralDeclaration cANYEnumLiteralDeclaration_2 = (EnumLiteralDeclaration)cAlternatives.eContents().get(2);
		private final Keyword cANYAnyKeyword_2_0 = (Keyword)cANYEnumLiteralDeclaration_2.eContents().get(0);
		private final EnumLiteralDeclaration cNO_ONEEnumLiteralDeclaration_3 = (EnumLiteralDeclaration)cAlternatives.eContents().get(3);
		private final Keyword cNO_ONENoOneKeyword_3_0 = (Keyword)cNO_ONEEnumLiteralDeclaration_3.eContents().get(0);
		
		//enum GroupClause:
		//	NULL="null" | ONLY="only" | ANY="any" | NO_ONE="no one";
		public EnumRule getRule() { return rule; }

		//NULL="null" | ONLY="only" | ANY="any" | NO_ONE="no one"
		public Alternatives getAlternatives() { return cAlternatives; }

		//NULL="null"
		public EnumLiteralDeclaration getNULLEnumLiteralDeclaration_0() { return cNULLEnumLiteralDeclaration_0; }

		//"null"
		public Keyword getNULLNullKeyword_0_0() { return cNULLNullKeyword_0_0; }

		//ONLY="only"
		public EnumLiteralDeclaration getONLYEnumLiteralDeclaration_1() { return cONLYEnumLiteralDeclaration_1; }

		//"only"
		public Keyword getONLYOnlyKeyword_1_0() { return cONLYOnlyKeyword_1_0; }

		//ANY="any"
		public EnumLiteralDeclaration getANYEnumLiteralDeclaration_2() { return cANYEnumLiteralDeclaration_2; }

		//"any"
		public Keyword getANYAnyKeyword_2_0() { return cANYAnyKeyword_2_0; }

		//NO_ONE="no one"
		public EnumLiteralDeclaration getNO_ONEEnumLiteralDeclaration_3() { return cNO_ONEEnumLiteralDeclaration_3; }

		//"no one"
		public Keyword getNO_ONENoOneKeyword_3_0() { return cNO_ONENoOneKeyword_3_0; }
	}

	public class PermissionClauseElements extends AbstractEnumRuleElementFinder {
		private final EnumRule rule = (EnumRule) GrammarUtil.findRuleForName(getGrammar(), "PermissionClause");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final EnumLiteralDeclaration cNULLEnumLiteralDeclaration_0 = (EnumLiteralDeclaration)cAlternatives.eContents().get(0);
		private final Keyword cNULLNullKeyword_0_0 = (Keyword)cNULLEnumLiteralDeclaration_0.eContents().get(0);
		private final EnumLiteralDeclaration cMUSTEnumLiteralDeclaration_1 = (EnumLiteralDeclaration)cAlternatives.eContents().get(1);
		private final Keyword cMUSTMustKeyword_1_0 = (Keyword)cMUSTEnumLiteralDeclaration_1.eContents().get(0);
		private final EnumLiteralDeclaration cCANEnumLiteralDeclaration_2 = (EnumLiteralDeclaration)cAlternatives.eContents().get(2);
		private final Keyword cCANCanKeyword_2_0 = (Keyword)cCANEnumLiteralDeclaration_2.eContents().get(0);
		private final EnumLiteralDeclaration cCANNOTEnumLiteralDeclaration_3 = (EnumLiteralDeclaration)cAlternatives.eContents().get(3);
		private final Keyword cCANNOTCannotKeyword_3_0 = (Keyword)cCANNOTEnumLiteralDeclaration_3.eContents().get(0);
		
		//enum PermissionClause:
		//	NULL="null" | MUST="must" | CAN="can" | CANNOT="cannot";
		public EnumRule getRule() { return rule; }

		//NULL="null" | MUST="must" | CAN="can" | CANNOT="cannot"
		public Alternatives getAlternatives() { return cAlternatives; }

		//NULL="null"
		public EnumLiteralDeclaration getNULLEnumLiteralDeclaration_0() { return cNULLEnumLiteralDeclaration_0; }

		//"null"
		public Keyword getNULLNullKeyword_0_0() { return cNULLNullKeyword_0_0; }

		//MUST="must"
		public EnumLiteralDeclaration getMUSTEnumLiteralDeclaration_1() { return cMUSTEnumLiteralDeclaration_1; }

		//"must"
		public Keyword getMUSTMustKeyword_1_0() { return cMUSTMustKeyword_1_0; }

		//CAN="can"
		public EnumLiteralDeclaration getCANEnumLiteralDeclaration_2() { return cCANEnumLiteralDeclaration_2; }

		//"can"
		public Keyword getCANCanKeyword_2_0() { return cCANCanKeyword_2_0; }

		//CANNOT="cannot"
		public EnumLiteralDeclaration getCANNOTEnumLiteralDeclaration_3() { return cCANNOTEnumLiteralDeclaration_3; }

		//"cannot"
		public Keyword getCANNOTCannotKeyword_3_0() { return cCANNOTCannotKeyword_3_0; }
	}

	public class RelactionTypeElements extends AbstractEnumRuleElementFinder {
		private final EnumRule rule = (EnumRule) GrammarUtil.findRuleForName(getGrammar(), "RelactionType");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final EnumLiteralDeclaration cACCESSEnumLiteralDeclaration_0 = (EnumLiteralDeclaration)cAlternatives.eContents().get(0);
		private final Keyword cACCESSAccessKeyword_0_0 = (Keyword)cACCESSEnumLiteralDeclaration_0.eContents().get(0);
		private final EnumLiteralDeclaration cDECLAREEnumLiteralDeclaration_1 = (EnumLiteralDeclaration)cAlternatives.eContents().get(1);
		private final Keyword cDECLAREDeclareKeyword_1_0 = (Keyword)cDECLAREEnumLiteralDeclaration_1.eContents().get(0);
		private final EnumLiteralDeclaration cHANDLEEnumLiteralDeclaration_2 = (EnumLiteralDeclaration)cAlternatives.eContents().get(2);
		private final Keyword cHANDLEHandleKeyword_2_0 = (Keyword)cHANDLEEnumLiteralDeclaration_2.eContents().get(0);
		private final EnumLiteralDeclaration cEXTENDEnumLiteralDeclaration_3 = (EnumLiteralDeclaration)cAlternatives.eContents().get(3);
		private final Keyword cEXTENDExtendKeyword_3_0 = (Keyword)cEXTENDEnumLiteralDeclaration_3.eContents().get(0);
		private final EnumLiteralDeclaration cIMPLEMENTEnumLiteralDeclaration_4 = (EnumLiteralDeclaration)cAlternatives.eContents().get(4);
		private final Keyword cIMPLEMENTImplementKeyword_4_0 = (Keyword)cIMPLEMENTEnumLiteralDeclaration_4.eContents().get(0);
		private final EnumLiteralDeclaration cCREATEEnumLiteralDeclaration_5 = (EnumLiteralDeclaration)cAlternatives.eContents().get(5);
		private final Keyword cCREATECreateKeyword_5_0 = (Keyword)cCREATEEnumLiteralDeclaration_5.eContents().get(0);
		private final EnumLiteralDeclaration cTHROWEnumLiteralDeclaration_6 = (EnumLiteralDeclaration)cAlternatives.eContents().get(6);
		private final Keyword cTHROWThrowKeyword_6_0 = (Keyword)cTHROWEnumLiteralDeclaration_6.eContents().get(0);
		private final EnumLiteralDeclaration cUSEANOTATIONEnumLiteralDeclaration_7 = (EnumLiteralDeclaration)cAlternatives.eContents().get(7);
		private final Keyword cUSEANOTATIONUseAnnotationKeyword_7_0 = (Keyword)cUSEANOTATIONEnumLiteralDeclaration_7.eContents().get(0);
		private final EnumLiteralDeclaration cDEPENDEnumLiteralDeclaration_8 = (EnumLiteralDeclaration)cAlternatives.eContents().get(8);
		private final Keyword cDEPENDDependKeyword_8_0 = (Keyword)cDEPENDEnumLiteralDeclaration_8.eContents().get(0);
		private final EnumLiteralDeclaration cREQUIRESEnumLiteralDeclaration_9 = (EnumLiteralDeclaration)cAlternatives.eContents().get(9);
		private final Keyword cREQUIRESRequiresKeyword_9_0 = (Keyword)cREQUIRESEnumLiteralDeclaration_9.eContents().get(0);
		
		//enum RelactionType:
		//	ACCESS="access" | DECLARE="declare" | HANDLE="handle" | EXTEND="extend" | IMPLEMENT="implement" | CREATE="create" |
		//	THROW="throw" | USEANOTATION="use annotation" | DEPEND="depend" | REQUIRES="requires";
		public EnumRule getRule() { return rule; }

		//ACCESS="access" | DECLARE="declare" | HANDLE="handle" | EXTEND="extend" | IMPLEMENT="implement" | CREATE="create" |
		//THROW="throw" | USEANOTATION="use annotation" | DEPEND="depend" | REQUIRES="requires"
		public Alternatives getAlternatives() { return cAlternatives; }

		//ACCESS="access"
		public EnumLiteralDeclaration getACCESSEnumLiteralDeclaration_0() { return cACCESSEnumLiteralDeclaration_0; }

		//"access"
		public Keyword getACCESSAccessKeyword_0_0() { return cACCESSAccessKeyword_0_0; }

		//DECLARE="declare"
		public EnumLiteralDeclaration getDECLAREEnumLiteralDeclaration_1() { return cDECLAREEnumLiteralDeclaration_1; }

		//"declare"
		public Keyword getDECLAREDeclareKeyword_1_0() { return cDECLAREDeclareKeyword_1_0; }

		//HANDLE="handle"
		public EnumLiteralDeclaration getHANDLEEnumLiteralDeclaration_2() { return cHANDLEEnumLiteralDeclaration_2; }

		//"handle"
		public Keyword getHANDLEHandleKeyword_2_0() { return cHANDLEHandleKeyword_2_0; }

		//EXTEND="extend"
		public EnumLiteralDeclaration getEXTENDEnumLiteralDeclaration_3() { return cEXTENDEnumLiteralDeclaration_3; }

		//"extend"
		public Keyword getEXTENDExtendKeyword_3_0() { return cEXTENDExtendKeyword_3_0; }

		//IMPLEMENT="implement"
		public EnumLiteralDeclaration getIMPLEMENTEnumLiteralDeclaration_4() { return cIMPLEMENTEnumLiteralDeclaration_4; }

		//"implement"
		public Keyword getIMPLEMENTImplementKeyword_4_0() { return cIMPLEMENTImplementKeyword_4_0; }

		//CREATE="create"
		public EnumLiteralDeclaration getCREATEEnumLiteralDeclaration_5() { return cCREATEEnumLiteralDeclaration_5; }

		//"create"
		public Keyword getCREATECreateKeyword_5_0() { return cCREATECreateKeyword_5_0; }

		//THROW="throw"
		public EnumLiteralDeclaration getTHROWEnumLiteralDeclaration_6() { return cTHROWEnumLiteralDeclaration_6; }

		//"throw"
		public Keyword getTHROWThrowKeyword_6_0() { return cTHROWThrowKeyword_6_0; }

		//USEANOTATION="use annotation"
		public EnumLiteralDeclaration getUSEANOTATIONEnumLiteralDeclaration_7() { return cUSEANOTATIONEnumLiteralDeclaration_7; }

		//"use annotation"
		public Keyword getUSEANOTATIONUseAnnotationKeyword_7_0() { return cUSEANOTATIONUseAnnotationKeyword_7_0; }

		//DEPEND="depend"
		public EnumLiteralDeclaration getDEPENDEnumLiteralDeclaration_8() { return cDEPENDEnumLiteralDeclaration_8; }

		//"depend"
		public Keyword getDEPENDDependKeyword_8_0() { return cDEPENDDependKeyword_8_0; }

		//REQUIRES="requires"
		public EnumLiteralDeclaration getREQUIRESEnumLiteralDeclaration_9() { return cREQUIRESEnumLiteralDeclaration_9; }

		//"requires"
		public Keyword getREQUIRESRequiresKeyword_9_0() { return cREQUIRESRequiresKeyword_9_0; }
	}
	
	private final ASMLModelElements pASMLModel;
	private final TerminalRule tID_ASML;
	private final ViewElements pView;
	private final CardinalityElements unknownRuleCardinality;
	private final AbstractComponentElements pAbstractComponent;
	private final AttributeElements pAttribute;
	private final AbstractNameConvetionElements pAbstractNameConvetion;
	private final ComponentElements pComponent;
	private final FrameworkInstantiationElements pFrameworkInstantiation;
	private final FrameworkClassElements pFrameworkClass;
	private final ExpressionMatchingClauseElements unknownRuleExpressionMatchingClause;
	private final ExpressionMatchingOperatorElements pExpressionMatchingOperator;
	private final LayerMatchingClauseElements unknownRuleLayerMatchingClause;
	private final ModuleMatchingParamenterElements unknownRuleModuleMatchingParamenter;
	private final LayerMatchingElements pLayerMatching;
	private final ModuleMatchingElements pModuleMatching;
	private final ClassMatchingElements pClassMatching;
	private final ConfigurationElementElements pConfigurationElement;
	private final FileElements pFile;
	private final ConfigurationElements pConfiguration;
	private final MethodElements pMethod;
	private final ClassElements pClass;
	private final XmlElementElements pXmlElement;
	private final XmlDocumentElements pXmlDocument;
	private final LayerElements pLayer;
	private final ModuleElements pModule;
	private final MetaModuleElements pMetaModule;
	private final QualifiedNameElements pQualifiedName;
	private final GroupClauseElements unknownRuleGroupClause;
	private final PermissionClauseElements unknownRulePermissionClause;
	private final RelactionTypeElements unknownRuleRelactionType;
	private final RestrictionElements pRestriction;
	
	private final Grammar grammar;

	private final TerminalsGrammarAccess gaTerminals;

	@Inject
	public ASMLModelGrammarAccess(GrammarProvider grammarProvider,
		TerminalsGrammarAccess gaTerminals) {
		this.grammar = internalFindGrammar(grammarProvider);
		this.gaTerminals = gaTerminals;
		this.pASMLModel = new ASMLModelElements();
		this.tID_ASML = (TerminalRule) GrammarUtil.findRuleForName(getGrammar(), "ID_ASML");
		this.pView = new ViewElements();
		this.unknownRuleCardinality = new CardinalityElements();
		this.pAbstractComponent = new AbstractComponentElements();
		this.pAttribute = new AttributeElements();
		this.pAbstractNameConvetion = new AbstractNameConvetionElements();
		this.pComponent = new ComponentElements();
		this.pFrameworkInstantiation = new FrameworkInstantiationElements();
		this.pFrameworkClass = new FrameworkClassElements();
		this.unknownRuleExpressionMatchingClause = new ExpressionMatchingClauseElements();
		this.pExpressionMatchingOperator = new ExpressionMatchingOperatorElements();
		this.unknownRuleLayerMatchingClause = new LayerMatchingClauseElements();
		this.unknownRuleModuleMatchingParamenter = new ModuleMatchingParamenterElements();
		this.pLayerMatching = new LayerMatchingElements();
		this.pModuleMatching = new ModuleMatchingElements();
		this.pClassMatching = new ClassMatchingElements();
		this.pConfigurationElement = new ConfigurationElementElements();
		this.pFile = new FileElements();
		this.pConfiguration = new ConfigurationElements();
		this.pMethod = new MethodElements();
		this.pClass = new ClassElements();
		this.pXmlElement = new XmlElementElements();
		this.pXmlDocument = new XmlDocumentElements();
		this.pLayer = new LayerElements();
		this.pModule = new ModuleElements();
		this.pMetaModule = new MetaModuleElements();
		this.pQualifiedName = new QualifiedNameElements();
		this.unknownRuleGroupClause = new GroupClauseElements();
		this.unknownRulePermissionClause = new PermissionClauseElements();
		this.unknownRuleRelactionType = new RelactionTypeElements();
		this.pRestriction = new RestrictionElements();
	}
	
	protected Grammar internalFindGrammar(GrammarProvider grammarProvider) {
		Grammar grammar = grammarProvider.getGrammar(this);
		while (grammar != null) {
			if ("br.ufmg.dcc.asml.ASMLModel".equals(grammar.getName())) {
				return grammar;
			}
			List<Grammar> grammars = grammar.getUsedGrammars();
			if (!grammars.isEmpty()) {
				grammar = grammars.iterator().next();
			} else {
				return null;
			}
		}
		return grammar;
	}
	
	
	public Grammar getGrammar() {
		return grammar;
	}
	

	public TerminalsGrammarAccess getTerminalsGrammarAccess() {
		return gaTerminals;
	}

	
	//ASMLModel:
	//	"architecture" name=ID_ASML "{" ("import" importURI=STRING ";")? views+=View* "}";
	public ASMLModelElements getASMLModelAccess() {
		return pASMLModel;
	}
	
	public ParserRule getASMLModelRule() {
		return getASMLModelAccess().getRule();
	}

	//terminal ID_ASML:
	//	("a".."z" | "A".."Z" | "_" | ".") ("a".."z" | "A".."Z" | "_" | "-" | "." | "0".."9")*;
	public TerminalRule getID_ASMLRule() {
		return tID_ASML;
	} 

	//View:
	//	"view" name=ID_ASML "{" (("attributes" attributes+=Attribute ","?)* ";")? components+=AbstractComponent*
	//	restrictions+=Restriction* "}";
	public ViewElements getViewAccess() {
		return pView;
	}
	
	public ParserRule getViewRule() {
		return getViewAccess().getRule();
	}

	//enum Cardinality:
	//	One="1" | Zero="0" | OneOrMany="1..*" | ZeroOrMany="0..*";
	public CardinalityElements getCardinalityAccess() {
		return unknownRuleCardinality;
	}
	
	public EnumRule getCardinalityRule() {
		return getCardinalityAccess().getRule();
	}

	//AbstractComponent:
	//	Layer | Module | MetaModule | Class | Method | ConfigurationElement | Component | FrameworkInstantiation |
	//	FrameworkClass;
	public AbstractComponentElements getAbstractComponentAccess() {
		return pAbstractComponent;
	}
	
	public ParserRule getAbstractComponentRule() {
		return getAbstractComponentAccess().getRule();
	}

	//Attribute:
	//	name=ID_ASML ":" value=STRING;
	public AttributeElements getAttributeAccess() {
		return pAttribute;
	}
	
	public ParserRule getAttributeRule() {
		return getAttributeAccess().getRule();
	}

	//AbstractNameConvetion:
	//	STRING | ClassMatching;
	public AbstractNameConvetionElements getAbstractNameConvetionAccess() {
		return pAbstractNameConvetion;
	}
	
	public ParserRule getAbstractNameConvetionRule() {
		return getAbstractNameConvetionAccess().getRule();
	}

	//Component:
	//	"component" name=ID_ASML "{" ("matching" matching=STRING ";")? ("cardinality" cardinality=Cardinality ";")?
	//	components+=AbstractComponent* restrictions+=Restriction* "}";
	public ComponentElements getComponentAccess() {
		return pComponent;
	}
	
	public ParserRule getComponentRule() {
		return getComponentAccess().getRule();
	}

	//FrameworkInstantiation:
	//	"framework-instantiation" name=ID_ASML "{" components+=AbstractComponent* restrictions+=Restriction* "}";
	public FrameworkInstantiationElements getFrameworkInstantiationAccess() {
		return pFrameworkInstantiation;
	}
	
	public ParserRule getFrameworkInstantiationRule() {
		return getFrameworkInstantiationAccess().getRule();
	}

	//FrameworkClass:
	//	"framework-class" name=ID_ASML "{" javaCLass=STRING ";" "}";
	public FrameworkClassElements getFrameworkClassAccess() {
		return pFrameworkClass;
	}
	
	public ParserRule getFrameworkClassRule() {
		return getFrameworkClassAccess().getRule();
	}

	//enum ExpressionMatchingClause:
	//	NAME_START_WITH="name start with" | NAME_ENDS_WITH="name ends with";
	public ExpressionMatchingClauseElements getExpressionMatchingClauseAccess() {
		return unknownRuleExpressionMatchingClause;
	}
	
	public EnumRule getExpressionMatchingClauseRule() {
		return getExpressionMatchingClauseAccess().getRule();
	}

	//ExpressionMatchingOperator:
	//	AND="and" | OR="or";
	public ExpressionMatchingOperatorElements getExpressionMatchingOperatorAccess() {
		return pExpressionMatchingOperator;
	}
	
	public ParserRule getExpressionMatchingOperatorRule() {
		return getExpressionMatchingOperatorAccess().getRule();
	}

	//enum LayerMatchingClause:
	//	RELATED_TO_COMPONENT="related to component" | EXTERNAL_DEFINITION="external definition";
	public LayerMatchingClauseElements getLayerMatchingClauseAccess() {
		return unknownRuleLayerMatchingClause;
	}
	
	public EnumRule getLayerMatchingClauseRule() {
		return getLayerMatchingClauseAccess().getRule();
	}

	//enum ModuleMatchingParamenter:
	//	PAKCAGE="by package name" | FOLDER="by folder name" | PAKCAGE_AND_FOLDER="by package and folder name" |
	//	EXTERNAL_DEFINITION="by external implementation";
	public ModuleMatchingParamenterElements getModuleMatchingParamenterAccess() {
		return unknownRuleModuleMatchingParamenter;
	}
	
	public EnumRule getModuleMatchingParamenterRule() {
		return getModuleMatchingParamenterAccess().getRule();
	}

	//LayerMatching:
	//	layerMatching=LayerMatchingClause parameter=[AbstractComponent|QualifiedName];
	public LayerMatchingElements getLayerMatchingAccess() {
		return pLayerMatching;
	}
	
	public ParserRule getLayerMatchingRule() {
		return getLayerMatchingAccess().getRule();
	}

	//ModuleMatching:
	//	parameter=ModuleMatchingParamenter;
	public ModuleMatchingElements getModuleMatchingAccess() {
		return pModuleMatching;
	}
	
	public ParserRule getModuleMatchingRule() {
		return getModuleMatchingAccess().getRule();
	}

	////	(operator=ExpressionMatchingOperator expressionMatchings=ExpressionMatchingClause parameter=STRING)?
	//ClassMatching:
	//	expressionMatching=ExpressionMatchingClause parameter=STRING;
	public ClassMatchingElements getClassMatchingAccess() {
		return pClassMatching;
	}
	
	public ParserRule getClassMatchingRule() {
		return getClassMatchingAccess().getRule();
	}

	//ConfigurationElement:
	//	Configuration | XmlDocument | XmlElement | File;
	public ConfigurationElementElements getConfigurationElementAccess() {
		return pConfigurationElement;
	}
	
	public ParserRule getConfigurationElementRule() {
		return getConfigurationElementAccess().getRule();
	}

	//File:
	//	"file" name=ID_ASML "{" ("matching" matching=AbstractNameConvetion ";")? ("cardinality" cardinality=Cardinality ";")?
	//	"}";
	public FileElements getFileAccess() {
		return pFile;
	}
	
	public ParserRule getFileRule() {
		return getFileAccess().getRule();
	}

	//Configuration:
	//	"configuration" name=ID_ASML "{" ("matching" matching=STRING ";")? ("cardinality" cardinality=Cardinality ";")?
	//	configurationElement+=ConfigurationElement* "}";
	public ConfigurationElements getConfigurationAccess() {
		return pConfiguration;
	}
	
	public ParserRule getConfigurationRule() {
		return getConfigurationAccess().getRule();
	}

	//Method:
	//	"method" name=ID_ASML "{" ("matching" matching=STRING ";")? ("cardinality" cardinality=Cardinality ";")? "}";
	public MethodElements getMethodAccess() {
		return pMethod;
	}
	
	public ParserRule getMethodRule() {
		return getMethodAccess().getRule();
	}

	//Class:
	//	"class" name=ID_ASML "{" ("description" description=STRING ";")? ("matching:" matching=AbstractNameConvetion ";")?
	//	("cardinality" cardinality=Cardinality ";")? methods+=Method* "}";
	public ClassElements getClassAccess() {
		return pClass;
	}
	
	public ParserRule getClassRule() {
		return getClassAccess().getRule();
	}

	//XmlElement:
	//	"xmlElement" name=ID_ASML "{" ("matching" matching=STRING ";")? ("cardinality" cardinality=Cardinality ";")? "}";
	public XmlElementElements getXmlElementAccess() {
		return pXmlElement;
	}
	
	public ParserRule getXmlElementRule() {
		return getXmlElementAccess().getRule();
	}

	//XmlDocument:
	//	"xmlDocument" name=ID_ASML "{" ("matching" matching=STRING ";")? ("cardinality" cardinality=Cardinality ";")? "}";
	public XmlDocumentElements getXmlDocumentAccess() {
		return pXmlDocument;
	}
	
	public ParserRule getXmlDocumentRule() {
		return getXmlDocumentAccess().getRule();
	}

	//Layer:
	//	"layer" name=ID_ASML "{" ("matching" matching=LayerMatching ";")? modules+=Module* restrictions+=Restriction* "}";
	public LayerElements getLayerAccess() {
		return pLayer;
	}
	
	public ParserRule getLayerRule() {
		return getLayerAccess().getRule();
	}

	//Module:
	//	"module" name=ID_ASML "{" (("attributes" attributes+=Attribute ","?)* ";")? ("matching" matching=ModuleMatching ";")?
	//	components+=AbstractComponent* restrictions+=Restriction* "}";
	public ModuleElements getModuleAccess() {
		return pModule;
	}
	
	public ParserRule getModuleRule() {
		return getModuleAccess().getRule();
	}

	//MetaModule:
	//	"meta-module" name=ID_ASML "{" (("attributes" attributes+=Attribute ","?)* ";")? ("matching" matching=ModuleMatching
	//	";")? components+=AbstractComponent* restrictions+=Restriction* "}";
	public MetaModuleElements getMetaModuleAccess() {
		return pMetaModule;
	}
	
	public ParserRule getMetaModuleRule() {
		return getMetaModuleAccess().getRule();
	}

	//QualifiedName:
	//	ID_ASML ("." ID_ASML)*;
	public QualifiedNameElements getQualifiedNameAccess() {
		return pQualifiedName;
	}
	
	public ParserRule getQualifiedNameRule() {
		return getQualifiedNameAccess().getRule();
	}

	//enum GroupClause:
	//	NULL="null" | ONLY="only" | ANY="any" | NO_ONE="no one";
	public GroupClauseElements getGroupClauseAccess() {
		return unknownRuleGroupClause;
	}
	
	public EnumRule getGroupClauseRule() {
		return getGroupClauseAccess().getRule();
	}

	//enum PermissionClause:
	//	NULL="null" | MUST="must" | CAN="can" | CANNOT="cannot";
	public PermissionClauseElements getPermissionClauseAccess() {
		return unknownRulePermissionClause;
	}
	
	public EnumRule getPermissionClauseRule() {
		return getPermissionClauseAccess().getRule();
	}

	//enum RelactionType:
	//	ACCESS="access" | DECLARE="declare" | HANDLE="handle" | EXTEND="extend" | IMPLEMENT="implement" | CREATE="create" |
	//	THROW="throw" | USEANOTATION="use annotation" | DEPEND="depend" | REQUIRES="requires";
	public RelactionTypeElements getRelactionTypeAccess() {
		return unknownRuleRelactionType;
	}
	
	public EnumRule getRelactionTypeRule() {
		return getRelactionTypeAccess().getRule();
	}

	//// Criar uma tipo para abarcar todos os atributos básicos, e assim evitar redundância e o uso exessivo de instanceof ao utilizar a linguagem programaticamente.
	//Restriction:
	//	"restriction" "{" groupClause=GroupClause? componentA+=[AbstractComponent|QualifiedName]*
	//	permissionClause=PermissionClause? relactionType=RelactionType componentB=[AbstractComponent|QualifiedName] "}";
	public RestrictionElements getRestrictionAccess() {
		return pRestriction;
	}
	
	public ParserRule getRestrictionRule() {
		return getRestrictionAccess().getRule();
	}

	//terminal ID:
	//	"^"? ("a".."z" | "A".."Z" | "_") ("a".."z" | "A".."Z" | "_" | "0".."9")*;
	public TerminalRule getIDRule() {
		return gaTerminals.getIDRule();
	} 

	//terminal INT returns ecore::EInt:
	//	"0".."9"+;
	public TerminalRule getINTRule() {
		return gaTerminals.getINTRule();
	} 

	//terminal STRING:
	//	"\"" ("\\" . / * 'b'|'t'|'n'|'f'|'r'|'u'|'"'|"'"|'\\' * / | !("\\" | "\""))* "\"" | "\'" ("\\" .
	//	/ * 'b'|'t'|'n'|'f'|'r'|'u'|'"'|"'"|'\\' * / | !("\\" | "\'"))* "\'";
	public TerminalRule getSTRINGRule() {
		return gaTerminals.getSTRINGRule();
	} 

	//terminal ML_COMMENT:
	//	"/ *"->"* /";
	public TerminalRule getML_COMMENTRule() {
		return gaTerminals.getML_COMMENTRule();
	} 

	//terminal SL_COMMENT:
	//	"//" !("\n" | "\r")* ("\r"? "\n")?;
	public TerminalRule getSL_COMMENTRule() {
		return gaTerminals.getSL_COMMENTRule();
	} 

	//terminal WS:
	//	(" " | "\t" | "\r" | "\n")+;
	public TerminalRule getWSRule() {
		return gaTerminals.getWSRule();
	} 

	//terminal ANY_OTHER:
	//	.;
	public TerminalRule getANY_OTHERRule() {
		return gaTerminals.getANY_OTHERRule();
	} 
}
